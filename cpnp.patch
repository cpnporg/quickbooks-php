Index: QuickBooks/Callbacks.php
===================================================================
--- QuickBooks/Callbacks.php	(revision 13297)
+++ QuickBooks/Callbacks.php	(working copy)
@@ -570,13 +570,13 @@
 			else
 			{
 				// There was no function registered for that action and request/response
-				$err = 'No function handlers for action: ' . $action;
+				$err = 'No function handlers for action (a): ' . $action . json_encode($which);
 			}
 		}
 		else
 		{
 			// There are *no* functions registered for that action
-			$err = 'No registered functions for action: ' . $action;
+			$err = 'No registered functions for action (b): ' . $action . json_encode($which) . json_encode($map);
 		}
 		
 		return '';		
Index: QuickBooks/QBXML/Schema/Object/JournalEntryModRq.php
===================================================================
--- QuickBooks/QBXML/Schema/Object/JournalEntryModRq.php	(revision 13297)
+++ QuickBooks/QBXML/Schema/Object/JournalEntryModRq.php	(working copy)
@@ -52,7 +52,7 @@
   'JournalLineMod ClassRef FullName' => 'STRTYPE',
   'JournalLineMod ItemSalesTaxRef ListID' => 'IDTYPE',
   'JournalLineMod ItemSalesTaxRef FullName' => 'STRTYPE',
-  'JournalLineMod BillableStatus' => 'ENUMTYPE',
+//  'JournalLineMod BillableStatus' => 'ENUMTYPE',
   'IncludeRetElement' => 'STRTYPE',
 );
 		
@@ -79,7 +79,7 @@
   'JournalLineMod ClassRef FullName' => 159,
   'JournalLineMod ItemSalesTaxRef ListID' => 0,
   'JournalLineMod ItemSalesTaxRef FullName' => 159,
-  'JournalLineMod BillableStatus' => 0,
+//  'JournalLineMod BillableStatus' => 0,
   'IncludeRetElement' => 50,
 );
 		
@@ -106,7 +106,7 @@
   'JournalLineMod ClassRef FullName' => true,
   'JournalLineMod ItemSalesTaxRef ListID' => true,
   'JournalLineMod ItemSalesTaxRef FullName' => true,
-  'JournalLineMod BillableStatus' => true,
+//  'JournalLineMod BillableStatus' => true,
   'IncludeRetElement' => true,
 );
 	}
@@ -131,7 +131,7 @@
   'JournalLineMod ClassRef FullName' => 999.99,
   'JournalLineMod ItemSalesTaxRef ListID' => 999.99,
   'JournalLineMod ItemSalesTaxRef FullName' => 999.99,
-  'JournalLineMod BillableStatus' => 999.99,
+//  'JournalLineMod BillableStatus' => 999.99,
   'IncludeRetElement' => 999.99,
 );
 		
@@ -158,7 +158,7 @@
   'JournalLineMod ClassRef FullName' => false,
   'JournalLineMod ItemSalesTaxRef ListID' => false,
   'JournalLineMod ItemSalesTaxRef FullName' => false,
-  'JournalLineMod BillableStatus' => false,
+//  'JournalLineMod BillableStatus' => false,
   'IncludeRetElement' => true,
 );
 			
@@ -197,7 +197,7 @@
   14 => 'JournalLineMod ClassRef FullName',
   15 => 'JournalLineMod ItemSalesTaxRef ListID',
   16 => 'JournalLineMod ItemSalesTaxRef FullName',
-  17 => 'JournalLineMod BillableStatus',
+//  17 => 'JournalLineMod BillableStatus',
   18 => 'IncludeRetElement',
 );
 			
@@ -205,4 +205,4 @@
 	}
 }
 
-?>
\ No newline at end of file
+?>
Index: QuickBooks/QBXML/Schema/Object/JournalEntryAddRq.php
===================================================================
--- QuickBooks/QBXML/Schema/Object/JournalEntryAddRq.php	(revision 13297)
+++ QuickBooks/QBXML/Schema/Object/JournalEntryAddRq.php	(working copy)
@@ -50,7 +50,7 @@
   'JournalDebitLine ClassRef FullName' => 'STRTYPE',
   'JournalDebitLine ItemSalesTaxRef ListID' => 'IDTYPE',
   'JournalDebitLine ItemSalesTaxRef FullName' => 'STRTYPE',
-  'JournalDebitLine BillableStatus' => 'ENUMTYPE',
+//  'JournalDebitLine BillableStatus' => 'ENUMTYPE',
   'JournalCreditLine TxnLineID' => 'IDTYPE',
   'JournalCreditLine AccountRef ListID' => 'IDTYPE',
   'JournalCreditLine AccountRef FullName' => 'STRTYPE',
@@ -62,7 +62,7 @@
   'JournalCreditLine ClassRef FullName' => 'STRTYPE',
   'JournalCreditLine ItemSalesTaxRef ListID' => 'IDTYPE',
   'JournalCreditLine ItemSalesTaxRef FullName' => 'STRTYPE',
-  'JournalCreditLine BillableStatus' => 'ENUMTYPE',
+//  'JournalCreditLine BillableStatus' => 'ENUMTYPE',
   'IncludeRetElement' => 'STRTYPE',
 );
 		
@@ -87,7 +87,7 @@
   'JournalDebitLine ClassRef FullName' => 159,
   'JournalDebitLine ItemSalesTaxRef ListID' => 0,
   'JournalDebitLine ItemSalesTaxRef FullName' => 159,
-  'JournalDebitLine BillableStatus' => 0,
+//  'JournalDebitLine BillableStatus' => 0,
   'JournalCreditLine TxnLineID' => 0,
   'JournalCreditLine AccountRef ListID' => 0,
   'JournalCreditLine AccountRef FullName' => 159,
@@ -99,7 +99,7 @@
   'JournalCreditLine ClassRef FullName' => 159,
   'JournalCreditLine ItemSalesTaxRef ListID' => 0,
   'JournalCreditLine ItemSalesTaxRef FullName' => 159,
-  'JournalCreditLine BillableStatus' => 0,
+//  'JournalCreditLine BillableStatus' => 0,
   'IncludeRetElement' => 50,
 );
 		
@@ -124,7 +124,7 @@
   'JournalDebitLine ClassRef FullName' => true,
   'JournalDebitLine ItemSalesTaxRef ListID' => true,
   'JournalDebitLine ItemSalesTaxRef FullName' => true,
-  'JournalDebitLine BillableStatus' => true,
+//  'JournalDebitLine BillableStatus' => true,
   'JournalCreditLine TxnLineID' => true,
   'JournalCreditLine AccountRef ListID' => true,
   'JournalCreditLine AccountRef FullName' => true,
@@ -136,7 +136,7 @@
   'JournalCreditLine ClassRef FullName' => true,
   'JournalCreditLine ItemSalesTaxRef ListID' => true,
   'JournalCreditLine ItemSalesTaxRef FullName' => true,
-  'JournalCreditLine BillableStatus' => true,
+//  'JournalCreditLine BillableStatus' => true,
   'IncludeRetElement' => true,
 );
 	}
@@ -159,7 +159,7 @@
   'JournalDebitLine ClassRef FullName' => 999.99,
   'JournalDebitLine ItemSalesTaxRef ListID' => 999.99,
   'JournalDebitLine ItemSalesTaxRef FullName' => 999.99,
-  'JournalDebitLine BillableStatus' => 3,
+//  'JournalDebitLine BillableStatus' => 3,
   'JournalCreditLine TxnLineID' => 999.99,
   'JournalCreditLine AccountRef ListID' => 999.99,
   'JournalCreditLine AccountRef FullName' => 999.99,
@@ -171,7 +171,7 @@
   'JournalCreditLine ClassRef FullName' => 999.99,
   'JournalCreditLine ItemSalesTaxRef ListID' => 999.99,
   'JournalCreditLine ItemSalesTaxRef FullName' => 999.99,
-  'JournalCreditLine BillableStatus' => 3,
+//  'JournalCreditLine BillableStatus' => 3,
   'IncludeRetElement' => 4,
 );
 		
@@ -196,7 +196,7 @@
   'JournalDebitLine ClassRef FullName' => false,
   'JournalDebitLine ItemSalesTaxRef ListID' => false,
   'JournalDebitLine ItemSalesTaxRef FullName' => false,
-  'JournalDebitLine BillableStatus' => false,
+//  'JournalDebitLine BillableStatus' => false,
   'JournalCreditLine TxnLineID' => false,
   'JournalCreditLine AccountRef ListID' => false,
   'JournalCreditLine AccountRef FullName' => false,
@@ -208,7 +208,7 @@
   'JournalCreditLine ClassRef FullName' => false,
   'JournalCreditLine ItemSalesTaxRef ListID' => false,
   'JournalCreditLine ItemSalesTaxRef FullName' => false,
-  'JournalCreditLine BillableStatus' => false,
+//  'JournalCreditLine BillableStatus' => false,
   'IncludeRetElement' => true,
 );
 			
@@ -246,7 +246,7 @@
   13 => 'JournalDebitLine ClassRef FullName',
   14 => 'JournalDebitLine ItemSalesTaxRef ListID',
   15 => 'JournalDebitLine ItemSalesTaxRef FullName',
-  16 => 'JournalDebitLine BillableStatus',
+//  16 => 'JournalDebitLine BillableStatus',
   17 => 'JournalCreditLine', 
   18 => 'JournalCreditLine TxnLineID',
   19 => 'JournalCreditLine AccountRef ListID',
@@ -259,7 +259,7 @@
   26 => 'JournalCreditLine ClassRef FullName',
   27 => 'JournalCreditLine ItemSalesTaxRef ListID',
   28 => 'JournalCreditLine ItemSalesTaxRef FullName',
-  29 => 'JournalCreditLine BillableStatus',
+//  29 => 'JournalCreditLine BillableStatus',
   30 => 'IncludeRetElement',
 );
 			
@@ -267,4 +267,4 @@
 	}
 }
 
-?>
\ No newline at end of file
+?>
Index: QuickBooks/QBXML/Schema/Object/CheckModRq.php
===================================================================
--- QuickBooks/QBXML/Schema/Object/CheckModRq.php	(revision 13297)
+++ QuickBooks/QBXML/Schema/Object/CheckModRq.php	(working copy)
@@ -73,7 +73,7 @@
   'ExpenseLineMod ClassRef FullName' => 'STRTYPE',
   'ExpenseLineMod SalesTaxCodeRef ListID' => 'IDTYPE',
   'ExpenseLineMod SalesTaxCodeRef FullName' => 'STRTYPE',
-  'ExpenseLineMod BillableStatus' => 'ENUMTYPE',
+//  'ExpenseLineMod BillableStatus' => 'ENUMTYPE',
   'ClearItemLines' => 'BOOLTYPE',
   'ItemLineMod TxnLineID' => 'IDTYPE',
   'ItemLineMod ItemRef ListID' => 'IDTYPE',
@@ -169,7 +169,7 @@
   'ExpenseLineMod ClassRef FullName' => 159,
   'ExpenseLineMod SalesTaxCodeRef ListID' => 0,
   'ExpenseLineMod SalesTaxCodeRef FullName' => 159,
-  'ExpenseLineMod BillableStatus' => 0,
+//  'ExpenseLineMod BillableStatus' => 0,
   'ClearItemLines' => 0,
   'ItemLineMod TxnLineID' => 0,
   'ItemLineMod ItemRef ListID' => 0,
@@ -265,7 +265,7 @@
   'ExpenseLineMod ClassRef FullName' => true,
   'ExpenseLineMod SalesTaxCodeRef ListID' => true,
   'ExpenseLineMod SalesTaxCodeRef FullName' => true,
-  'ExpenseLineMod BillableStatus' => true,
+//  'ExpenseLineMod BillableStatus' => true,
   'ClearItemLines' => true,
   'ItemLineMod TxnLineID' => false,
   'ItemLineMod ItemRef ListID' => true,
@@ -359,7 +359,7 @@
   'ExpenseLineMod ClassRef FullName' => 999.99,
   'ExpenseLineMod SalesTaxCodeRef ListID' => 999.99,
   'ExpenseLineMod SalesTaxCodeRef FullName' => 999.99,
-  'ExpenseLineMod BillableStatus' => 999.99,
+//  'ExpenseLineMod BillableStatus' => 999.99,
   'ClearItemLines' => 999.99,
   'ItemLineMod TxnLineID' => 999.99,
   'ItemLineMod ItemRef ListID' => 999.99,
@@ -455,7 +455,7 @@
   'ExpenseLineMod ClassRef FullName' => false,
   'ExpenseLineMod SalesTaxCodeRef ListID' => false,
   'ExpenseLineMod SalesTaxCodeRef FullName' => false,
-  'ExpenseLineMod BillableStatus' => false,
+//  'ExpenseLineMod BillableStatus' => false,
   'ClearItemLines' => false,
   'ItemLineMod TxnLineID' => false,
   'ItemLineMod ItemRef ListID' => false,
@@ -563,7 +563,7 @@
   35 => 'ExpenseLineMod ClassRef FullName',
   36 => 'ExpenseLineMod SalesTaxCodeRef ListID',
   37 => 'ExpenseLineMod SalesTaxCodeRef FullName',
-  38 => 'ExpenseLineMod BillableStatus',
+//  38 => 'ExpenseLineMod BillableStatus',
   39 => 'ClearItemLines',
   40 => 'ItemLineMod TxnLineID',
   41 => 'ItemLineMod ItemRef ListID',
Index: QuickBooks/QBXML/Schema/Object/CheckAddRq.php
===================================================================
--- QuickBooks/QBXML/Schema/Object/CheckAddRq.php	(revision 13297)
+++ QuickBooks/QBXML/Schema/Object/CheckAddRq.php	(working copy)
@@ -69,7 +69,7 @@
   'ExpenseLineAdd ClassRef FullName' => 'STRTYPE',
   'ExpenseLineAdd SalesTaxCodeRef ListID' => 'IDTYPE',
   'ExpenseLineAdd SalesTaxCodeRef FullName' => 'STRTYPE',
-  'ExpenseLineAdd BillableStatus' => 'ENUMTYPE',
+//  'ExpenseLineAdd BillableStatus' => 'ENUMTYPE',
   'ItemLineAdd ItemRef ListID' => 'IDTYPE',
   'ItemLineAdd ItemRef FullName' => 'STRTYPE',
   'ItemLineAdd Desc' => 'STRTYPE',
@@ -137,7 +137,7 @@
   'ExpenseLineAdd ClassRef FullName' => 159,
   'ExpenseLineAdd SalesTaxCodeRef ListID' => 0,
   'ExpenseLineAdd SalesTaxCodeRef FullName' => 159,
-  'ExpenseLineAdd BillableStatus' => 0,
+//  'ExpenseLineAdd BillableStatus' => 0,
   'ItemLineAdd ItemRef ListID' => 0,
   'ItemLineAdd ItemRef FullName' => 159,
   'ItemLineAdd Desc' => 4095,
@@ -205,7 +205,7 @@
   'ExpenseLineAdd ClassRef FullName' => true,
   'ExpenseLineAdd SalesTaxCodeRef ListID' => true,
   'ExpenseLineAdd SalesTaxCodeRef FullName' => true,
-  'ExpenseLineAdd BillableStatus' => true,
+//  'ExpenseLineAdd BillableStatus' => true,
   'ItemLineAdd ItemRef ListID' => true,
   'ItemLineAdd ItemRef FullName' => true,
   'ItemLineAdd Desc' => true,
@@ -271,7 +271,7 @@
   'ExpenseLineAdd ClassRef FullName' => 999.99,
   'ExpenseLineAdd SalesTaxCodeRef ListID' => 999.99,
   'ExpenseLineAdd SalesTaxCodeRef FullName' => 999.99,
-  'ExpenseLineAdd BillableStatus' => 2,
+//  'ExpenseLineAdd BillableStatus' => 2,
   'ItemLineAdd ItemRef ListID' => 999.99,
   'ItemLineAdd ItemRef FullName' => 999.99,
   'ItemLineAdd Desc' => 999.99,
@@ -339,7 +339,7 @@
   'ExpenseLineAdd ClassRef FullName' => false,
   'ExpenseLineAdd SalesTaxCodeRef ListID' => false,
   'ExpenseLineAdd SalesTaxCodeRef FullName' => false,
-  'ExpenseLineAdd BillableStatus' => false,
+//  'ExpenseLineAdd BillableStatus' => false,
   'ItemLineAdd ItemRef ListID' => false,
   'ItemLineAdd ItemRef FullName' => false,
   'ItemLineAdd Desc' => false,
@@ -421,7 +421,7 @@
   33 => 'ExpenseLineAdd ClassRef FullName',
   34 => 'ExpenseLineAdd SalesTaxCodeRef ListID',
   35 => 'ExpenseLineAdd SalesTaxCodeRef FullName',
-  36 => 'ExpenseLineAdd BillableStatus',
+//  36 => 'ExpenseLineAdd BillableStatus',
   37 => 'ItemLineAdd', 
   38 => 'ItemLineAdd ItemRef ListID',
   39 => 'ItemLineAdd ItemRef FullName',
Index: QuickBooks/Driver/Sql.php
===================================================================
--- QuickBooks/Driver/Sql.php	(revision 13297)
+++ QuickBooks/Driver/Sql.php	(working copy)
@@ -2,14 +2,14 @@
 
 /**
  * QuickBooks SQL-database driver base-class
- * 
- * All SQL back-end drivers should extend this class. This class provides some 
- * database abstraction and scheme generating functions for SQL back-ends. 
- * 
+ *
+ * All SQL back-end drivers should extend this class. This class provides some
+ * database abstraction and scheme generating functions for SQL back-ends.
+ *
  * @author Keith Palmer <keith@consolibyte.com>
  * @author Garrett Griffin <grgisme@gmail.com>
  * @license LICENSE.txt
- * 
+ *
  * @package QuickBooks
  * @subpackage Driver
  */
@@ -97,19 +97,19 @@
 define('QUICKBOOKS_DRIVER_SQL_TIMESTAMP', 'timestamp');
 
 /**
- * 
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_TIMESTAMP_ON_INSERT_OR_UPDATE', 'timestamp-on-update-or-insert');
 
 /**
- * 
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_TIMESTAMP_ON_UPDATE', 'timestamp-on-update');
 
 /**
- * 
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_TIMESTAMP_ON_INSERT', 'timestamp-on-insert');
@@ -187,102 +187,102 @@
 define('QUICKBOOKS_DRIVER_SQL_CONNECTIONTABLE', 'connection');
 
 /**
- * 
- * 
+ *
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_ID', 'qbsql_id');
 
 /**
  * Default SQL field to keep track of when records were first pushed into the database
- * 
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_DISCOVER', 'qbsql_discov_datetime');
 
 /**
- * Default SQL field to keep track of when records were last synced from QuickBooks 
- * 
+ * Default SQL field to keep track of when records were last synced from QuickBooks
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_RESYNC', 'qbsql_resync_datetime');
 
 /**
  * Default SQL field to keep track of records that have been modified (update-on-modify if SQL driver supports it)
- * 
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_MODIFY', 'qbsql_modify_timestamp');
 
 /**
  * Default SQL field to keep track of the last record hash for this record
- * 
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_HASH', 'qbsql_last_hash');
 
 /**
  * Default SQL field to keep track of records that should be deleted
- * 
- * 
+ *
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_TO_SYNC', 'qbsql_to_sync');
 
 /**
  * Default SQL field to keep track of records that should be deleted
- * 
- * 
+ *
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_TO_DELETE', 'qbsql_to_delete');
 
 /**
  * Default SQL field to keep track of records that should be deleted
- * 
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_TO_SKIP', 'qbsql_to_skip');
 
 /**
- * 
- * 
+ *
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_FLAG_SKIPPED', 'qbsql_flag_skipped');
 
-/** 
- * 
- * 
+/**
+ *
+ *
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_FLAG_DELETED', 'qbsql_flag_deleted');
 
 /**
  * Default SQL field to keep track of add/mods that failed
- * 
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_ERROR_NUMBER', 'qbsql_last_errnum');
 
 /**
  * Default SQL field to keep track of why add/mods failed
- * 
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_ERROR_MESSAGE', 'qbsql_last_errmsg');
 
 /**
  * Default SQL field to keep track of records that should be updated
- * 
- * 
+ *
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_ENQUEUE_TIME', 'qbsql_enqueue_datetime');
 
 /**
  * Default SQL field to keep track of when record was last dequeued
- * 
- * 
+ *
+ *
  * @var string
  */
 define('QUICKBOOKS_DRIVER_SQL_FIELD_DEQUEUE_TIME', 'qbsql_dequeue_datetime');
@@ -297,7 +297,7 @@
 if (!defined('QUICKBOOKS_DRIVER_SQL_SALT'))
 {
 	/**
-	 * 
+	 *
 	 */
 	define('QUICKBOOKS_DRIVER_SQL_SALT', '@ndP3pp@');
 }
@@ -312,19 +312,19 @@
 	 * @var integer
 	 */
 	protected $_max_log_history;
-	
+
 	/**
 	 * The maximum number of (successfully processed) entries we should keep in the queue table
 	 * @var integer
 	 */
 	protected $_max_queue_history;
-	
+
 	/**
 	 * The maximum number of entries we should keep in the ticket table
 	 * @var integer
 	 */
-	protected $_max_ticket_history;	
-		
+	protected $_max_ticket_history;
+
 	/**
 	 * The logging level to log messages at
 	 * @var integer
@@ -332,43 +332,43 @@
 	protected $_log_level;
 
 	/**
-	 * 
-	 * 
+	 *
+	 *
 	 * @param string $dsn
 	 * @param array $config
 	 */
 	public function __construct($dsn, $config)
 	{
 		$config = $this->__defaults($config);
-		
+
 		$this->_max_log_history = (int) $config['max_log_history'];
 		$this->_max_queue_history = (int) $config['max_queue_history'];
 		$this->_max_ticket_history = (int) $config['max_ticket_history'];
-		
+
 		$this->_log_level = $config['log_level'];
 	}
-	
+
 	/**
 	 * Merge an array of configuration options with the defaults
-	 * 
+	 *
 	 * @param array $config
-	 * @return array 
+	 * @return array
 	 */
 	private function __defaults($config)
 	{
 		$defaults = array(
 			'max_log_history' => -1, 		// -1 means no limit
-			'max_queue_history' => -1, 
-			'max_ticket_history' => -1, 
-			'log_level' => QUICKBOOKS_LOG_NORMAL, 
+			'max_queue_history' => -1,
+			'max_ticket_history' => -1,
+			'log_level' => QUICKBOOKS_LOG_NORMAL,
 			);
-		
+
 		return array_merge($defaults, $config);
 	}
-	
+
 	/**
 	 * Resolve a ticket string back to a ticket ID number
-	 * 
+	 *
 	 * @param string $ticket
 	 * @return integer
 	 */
@@ -376,52 +376,52 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if ($arr = $this->_fetch($this->_query("
-			SELECT 
-				* 
-			FROM 
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . " 
-			WHERE 
+			SELECT
+				*
+			FROM
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . "
+			WHERE
 				ticket = '" . $this->_escape($ticket) . "' ", $errnum, $errmsg)))
 		{
 			return $arr['quickbooks_ticket_id'];
 		}
-		
+
 		return 0;
 	}
-	
+
 	/**
 	 * Write a configuration variable to the database
-	 * 
+	 *
 	 * @param string $user		The QuickBooks user this is stored for
 	 * @param string $module	The module name this is stored for (free-form text, you make it up, but make it unique! a good habit is to use the __CLASS__ constant)
 	 * @param string $key		A key to fetch and store this value by
 	 * @param mixed $value		The value
-	 * @param string $type		
-	 * @param array $opts		
+	 * @param string $type
+	 * @param array $opts
 	 * @return boolean			Success or failure
 	 */
 	protected function _configWrite($user, $module, $key, $value, $type, $opts)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if ($arr = $this->_fetch($this->_query("
-			SELECT 
-				quickbooks_config_id 
-			FROM 
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_CONFIGTABLE) . " 
-			WHERE 
-				qb_username = '" . $this->_escape($user) . "' AND 
-				module = '" . $this->_escape($module) . "' AND 
+			SELECT
+				quickbooks_config_id
+			FROM
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_CONFIGTABLE) . "
+			WHERE
+				qb_username = '" . $this->_escape($user) . "' AND
+				module = '" . $this->_escape($module) . "' AND
 				cfgkey = '" . $this->_escape($key) . "' ", $errnum, $errmsg)))
 		{
 			$this->_query("
 				UPDATE
 					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_CONFIGTABLE) . "
 				SET
-					cfgval = '" . $this->_escape($value) . "', 
+					cfgval = '" . $this->_escape($value) . "',
 					mod_datetime = NOW()
 				WHERE
 					quickbooks_config_id = " . $arr['quickbooks_config_id'], $errnum, $errmsg);
@@ -429,72 +429,72 @@
 		else
 		{
 			return $this->_query("
-				INSERT INTO 
+				INSERT INTO
 					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_CONFIGTABLE) . "
 				(
-					qb_username, 
-					module, 
-					cfgkey, 
-					cfgval, 
-					cfgtype, 
-					cfgopts, 
-					write_datetime, 
+					qb_username,
+					module,
+					cfgkey,
+					cfgval,
+					cfgtype,
+					cfgopts,
+					write_datetime,
 					mod_datetime
-				) VALUES ( 
-					'" . $this->_escape($user) . "', 
-					'" . $this->_escape($module) . "', 
-					'" . $this->_escape($key) . "', 
-					'" . $this->_escape($value) . "', 
-					'" . $this->_escape($type) . "', 
-					'" . $this->_escape(serialize($opts)) . "', 
-					NOW(), 
+				) VALUES (
+					'" . $this->_escape($user) . "',
+					'" . $this->_escape($module) . "',
+					'" . $this->_escape($key) . "',
+					'" . $this->_escape($value) . "',
+					'" . $this->_escape($type) . "',
+					'" . $this->_escape(serialize($opts)) . "',
+					NOW(),
 					NOW()
 				) ", $errnum, $errmsg);
 		}
 	}
-	
+
 	/**
-	 * Read configuration information 
-	 * 
+	 * Read configuration information
+	 *
 	 * @param string $user		The username to store this for
 	 * @param string $module	The module to store this for
 	 * @param string $key		The key to store this by
-	 * @param string $type		
-	 * @param array $opts		
-	 * @return mixed			The value read from the SQL database 
+	 * @param string $type
+	 * @param array $opts
+	 * @return mixed			The value read from the SQL database
 	 */
 	protected function _configRead($user, $module, $key, &$type, &$opts)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if ($arr = $this->_fetch($this->_query("
-			SELECT 
-				cfgval, 
-				cfgtype, 
+			SELECT
+				cfgval,
+				cfgtype,
 				cfgopts
-			FROM 
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_CONFIGTABLE) . " 
-			WHERE 
-				qb_username = '" . $this->_escape($user) . "' AND 
-				module = '" . $this->_escape($module) . "' AND 
+			FROM
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_CONFIGTABLE) . "
+			WHERE
+				qb_username = '" . $this->_escape($user) . "' AND
+				module = '" . $this->_escape($module) . "' AND
 				cfgkey = '" . $this->_escape($key) . "' ", $errnum, $errmsg)))
 		{
 			$type = $arr['cfgtype'];
 			$opts = $arr['cfgopts'];
-			
+
 			return $arr['cfgval'];
 		}
-		
+
 		$type = null;
 		$opts = null;
-		
+
 		return null;
 	}
-	
+
 	/**
 	 * Convert a ticket into a username
-	 * 
+	 *
 	 * @param string $ticket
 	 * @return string			The username of the user who belongs to this ticket
 	 */
@@ -505,64 +505,64 @@
 			$errnum = 0;
 			$errmsg = '';
 			$arr = $this->_fetch($this->_query("
-				SELECT 
-					qb_username 
-				FROM 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . " 
-				WHERE 
+				SELECT
+					qb_username
+				FROM
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . "
+				WHERE
 					quickbooks_ticket_id = " . $ticket_id, $errnum, $errmsg));
-			
+
 			return $arr['qb_username'];
 		}
-		
+
 		return '';
-	} 
-	
+	}
 
+
 	/**
 	 * Create a new user for the SOAP server
-	 * 
+	 *
 	 * @param string $username
 	 * @param string $password
-	 * @return boolean 
+	 * @return boolean
 	 */
 	protected function _authCreate($username, $password, $company_file = null, $wait_before_next_update = null, $min_run_every_n_seconds = null)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if (!$this->_count($this->_query("SELECT qb_username FROM " . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . " WHERE qb_username = '" . $this->_escape($username) . "' ", $errnum, $errmsg, 0, 1)))
 		{
 			return $this->_query("
-				INSERT INTO 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . " 
-				( 
-					qb_username, 
-					qb_password, 
-					qb_company_file, 
-					qbwc_wait_before_next_update, 
-					qbwc_min_run_every_n_seconds, 
-					status, 
-					write_datetime, 
+				INSERT INTO
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . "
+				(
+					qb_username,
+					qb_password,
+					qb_company_file,
+					qbwc_wait_before_next_update,
+					qbwc_min_run_every_n_seconds,
+					status,
+					write_datetime,
 					touch_datetime
 				) VALUES (
-					'" . $this->_escape($username) . "', 
-					'" . $this->_escape($this->_hash($password)) . "', 
-					'" . $this->_escape($company_file) . "', 
-					" . (int) $wait_before_next_update . ", 
-					" . (int) $min_run_every_n_seconds . ", 
-					'" . QUICKBOOKS_USER_ENABLED . "', 
-					'" . date('Y-m-d H:i:s') . "', 
+					'" . $this->_escape($username) . "',
+					'" . $this->_escape($this->_hash($password)) . "',
+					'" . $this->_escape($company_file) . "',
+					" . (int) $wait_before_next_update . ",
+					" . (int) $min_run_every_n_seconds . ",
+					'" . QUICKBOOKS_USER_ENABLED . "',
+					'" . date('Y-m-d H:i:s') . "',
 					'" . date('Y-m-d H:i:s') . "'
 				) ", $errnum, $errmsg);
 		}
-		
+
 		return false;
 	}
-	
+
 	/**
 	 * Enable a username
-	 * 
+	 *
 	 * @param string $username
 	 * @return boolean
 	 */
@@ -570,20 +570,20 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		return $this->_query("
-			UPDATE 
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . " 
+			UPDATE
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . "
 			SET
-				status = '" . QUICKBOOKS_USER_ENABLED . "', 
+				status = '" . QUICKBOOKS_USER_ENABLED . "',
 				touch_datetime = '" . date('Y-m-d H:i:s') . "'
 			WHERE
 				qb_username = '" . $this->_escape($username) . "' ");
 	}
-	
+
 	/**
 	 * Disable a username
-	 * 
+	 *
 	 * @param string $username
 	 * @return boolean
 	 */
@@ -591,44 +591,44 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		return $this->_query("
-			UPDATE 
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . " 
+			UPDATE
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . "
 			SET
-				status = '" . QUICKBOOKS_USER_DISABLED . "', 
+				status = '" . QUICKBOOKS_USER_DISABLED . "',
 				touch_datetime = '" . date('Y-m-d H:i:s') . "'
 			WHERE
 				qb_username = '" . $this->_escape($username) . "' ");
 	}
-	
+
 	/**
 	 * Get the default user
-	 * 
+	 *
 	 * @return string
 	 */
 	protected function _authDefault()
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if ($arr = $this->_fetch($this->_query("
-			SELECT 
-				qb_username 
-			FROM 
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . " 
+			SELECT
+				qb_username
+			FROM
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . "
 			WHERE
 				status = '" . QUICKBOOKS_USER_ENABLED . "' ", $errnum, $errmsg, 0, 1)))
 		{
 			return $arr['qb_username'];
 		}
-		
+
 		return '';
 	}
-	
+
 	/**
 	 * Search for QuickBooks users
-	 * 
+	 *
 	 * @param integer $offset
 	 * @param integer $limit
 	 * @param string $match
@@ -638,38 +638,38 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$match = trim($match);
-		
+
 		$list = array();
-		
+
 		if (strlen($match))
 		{
-			
+
 		}
 		else
 		{
 			$sql = "
-				SELECT 
-					* 
-				FROM 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . " 
-				ORDER BY 
+				SELECT
+					*
+				FROM
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . "
+				ORDER BY
 					qb_username ASC ";
 		}
-		
+
 		$res = $this->_query($sql, $errnum, $errmsg, $offset, $limit);
 		while ($arr = $this->_fetch($res))
 		{
 			$list[] = $arr;
 		}
-		
+
 		return new QuickBooks_Iterator($list);
 	}
-	
+
 	/**
 	 * Get a count of how many results a search would return
-	 * 
+	 *
 	 * @param string $match
 	 * @return integer
 	 */
@@ -677,27 +677,27 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$match = trim($match);
-		
+
 		if (strlen($match))
 		{
-			
+
 		}
 		else
 		{
 			$sql = "SELECT COUNT(*) AS total FROM " . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE);
 		}
-		
+
 		$arr = $this->_fetch($this->_query($sql, $errnum, $errmsg));
 		return $arr['total'];
 	}
-	
+
 	/**
 	 * Log a user in
-	 * 
-	 * @param string $username		
-	 * @param string $password		
+	 *
+	 * @param string $username
+	 * @param string $password
 	 * @param boolean $override		If this is set to TRUE, a correct password *is not* required
 	 * @return string				A session ticket, or an empty string if the login failed
 	 */
@@ -705,14 +705,14 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if ($override) // We still need to make sure that the user exists, even if using external authentication
 		{
 			$this->authCreate($username, $password);
 		}
 		else if (strlen(trim($password)) == 0)
 		{
-			// Blank passwords *always fail* 
+			// Blank passwords *always fail*
 			return null;
 		}
 		else if (strlen(trim($password)) == 32 or strlen(trim($password)) == 40)
@@ -720,72 +720,72 @@
 			// Possible *hack* attempt (they're sending us a random hash hoping it will match one of the hashed passwords)
 			return null;
 		}
-		
+
 		// Support for plain-text, MD5 (without salt), and SHA1 (without salt) passwords
 		$plain_text = $password;
 		$plain_md5 = md5($password);
 		$plain_sha1 = sha1($password);
-		
-		if ($override or 
+
+		if ($override or
 			$arr = $this->_fetch($this->_query("
-				SELECT 
-					* 
-				FROM 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . " 
-				WHERE 
-					qb_username = '" . $this->_escape($username) . "' AND 
+				SELECT
+					*
+				FROM
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . "
+				WHERE
+					qb_username = '" . $this->_escape($username) . "' AND
 					(
 						qb_password = '" . $this->_escape($this->_hash($password)) . "' OR
-						qb_password = '" . $this->_escape($plain_text) . "' OR 
-						qb_password = '" . $this->_escape($plain_md5) . "' OR 
-						qb_password = '" . $this->_escape($plain_sha1) . "' 
-					) AND 
+						qb_password = '" . $this->_escape($plain_text) . "' OR
+						qb_password = '" . $this->_escape($plain_md5) . "' OR
+						qb_password = '" . $this->_escape($plain_sha1) . "'
+					) AND
 					status = '" . QUICKBOOKS_USER_ENABLED . "' ", $errnum, $errmsg, 0, 1)))
 		{
 			$ticket = md5((string) microtime() . $username . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_SALT));
-			
+
 			$this->_query("
-				INSERT INTO 
+				INSERT INTO
 					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . "
-				( 
-					qb_username, 
-					ticket, 
-					ipaddr, 
-					write_datetime, 
+				(
+					qb_username,
+					ticket,
+					ipaddr,
+					write_datetime,
 					touch_datetime
-				) VALUES ( 
-					'" . $this->_escape($username) . "', 
+				) VALUES (
+					'" . $this->_escape($username) . "',
 					'" . $this->_escape($ticket) . "',
-					'" . $_SERVER['REMOTE_ADDR'] . "',  
-					'" . date('Y-m-d H:i:s') . "', 
+					'" . $_SERVER['REMOTE_ADDR'] . "',
+					'" . date('Y-m-d H:i:s') . "',
 					'" . date('Y-m-d H:i:s') . "'
 				) ", $errnum, $errmsg);
-			
+
 			$this->_query("
-				UPDATE 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . " 
-				SET 
+				UPDATE
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE) . "
+				SET
 					touch_datetime = '" . date('Y-m-d H:i:s') . "'
-				WHERE 
+				WHERE
 					qb_username = '" . $this->_escape($username) . "' ", $errnum, $errmsg);
-			
-			if (isset($arr) and 
+
+			if (isset($arr) and
 				is_array($arr))		// Might not have this if it's an authenticate override
 			{
 				$company_file = $arr['qb_company_file'];
 				$wait_before_next_update = $arr['qbwc_wait_before_next_update'];
 				$min_run_every_n_seconds = $arr['qbwc_min_run_every_n_seconds'];
 			}
-			
+
 			return $ticket;
 		}
-		
+
 		return null;
 	}
-	
+
 	/**
 	 * Check to see if a log in session is valid
-	 * 
+	 *
 	 * @param string $ticket
 	 * @return boolean
 	 */
@@ -793,33 +793,33 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if ($arr = $this->_fetch($this->_query("
-			SELECT 
-				quickbooks_ticket_id 
-			FROM 
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . " 
-			WHERE 
-				ticket = '" . $this->_escape($ticket) . "' AND 
+			SELECT
+				quickbooks_ticket_id
+			FROM
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . "
+			WHERE
+				ticket = '" . $this->_escape($ticket) . "' AND
 				touch_datetime > '" . date('Y-m-d H:i:s', time() - QUICKBOOKS_TIMEOUT) . "' ", $errnum, $errmsg)))
 		{
 			$this->_query("
-				UPDATE 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . " 
-				SET 
-					touch_datetime = '" . date('Y-m-d H:i:s') . "' 
-				WHERE 
+				UPDATE
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . "
+				SET
+					touch_datetime = '" . date('Y-m-d H:i:s') . "'
+				WHERE
 					quickbooks_ticket_id = " . $arr['quickbooks_ticket_id'], $errnum, $errmsg);
-			
+
 			return true;
 		}
-		
+
 		return false;
 	}
-	
+
 	/**
 	 * Log a user out
-	 * 
+	 *
 	 * @param string $ticket
 	 * @return boolean
 	 */
@@ -827,10 +827,10 @@
 	{
 		return true;
 	}
-	
+
 	/**
-	 * Store the last error which occured 
-	 * 
+	 * Store the last error which occured
+	 *
 	 * @param string $ticket		The session ticket for the session this error occured within
 	 * @param string $errnum		The error number
 	 * @param string $errmsg		The error message
@@ -842,23 +842,23 @@
 		{
 			$db_errnum = 0;
 			$db_errmsg = '';
-			
+
 			return $this->_query("
-				UPDATE 
+				UPDATE
 					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . "
-				 SET 
-					lasterror_num = '" . $this->_escape($errnum) . "', 
-					lasterror_msg = '" . $this->_escape($errmsg) . "' 
-				WHERE 
+				 SET
+					lasterror_num = '" . $this->_escape($errnum) . "',
+					lasterror_msg = '" . $this->_escape($errmsg) . "'
+				WHERE
 					quickbooks_ticket_id = " . $ticket_id, $db_errnum, $db_errmsg);
 		}
-		
+
 		return false;
 	}
-	
+
 	/**
 	 * Retreive the last error message which occured for a given ticket (session)
-	 * 
+	 *
 	 * @param string $ticket
 	 * @return string
 	 */
@@ -866,7 +866,7 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if ($ticket_id = $this->_ticketResolve($ticket))
 		{
 			if ($arr = $this->_fetch($this->_query("SELECT lasterror_num, lasterror_msg FROM " . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . " WHERE quickbooks_ticket_id = '" . $ticket_id . "' ", $errnum, $errmsg, 0, 1)))
@@ -874,13 +874,13 @@
 				return $arr['lasterror_num'] . ': ' . $arr['lasterror_msg'];
 			}
 		}
-		
+
 		return 'Error fetching last error.';
 	}
-	
+
 	/**
 	 * Register a recurring event for a particular user
-	 * 
+	 *
 	 * @param string $user
 	 * @param integer $run_every
 	 * @param string $action
@@ -894,68 +894,68 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		// By default, it has *never* occured
 		$recur_lasttime = (time() - $run_every - 60);
-		
+
 		if ($replace)
 		{
 			if ($existing = $this->_fetch($this->_query("
-					SELECT 
-						recur_lasttime 
-					FROM 
-						" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . " 
-					WHERE 
-						qb_username = '" . $this->_escape($user) . "' AND 
-						qb_action = '" . $this->_escape($action) . "' AND 
+					SELECT
+						recur_lasttime
+					FROM
+						" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . "
+					WHERE
+						qb_username = '" . $this->_escape($user) . "' AND
+						qb_action = '" . $this->_escape($action) . "' AND
 						ident = '" . $this->_escape($ident) . "' ", $errnum, $errmsg)))
 			{
 				$this->_query("
 					DELETE FROM
-						" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . " 
+						" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . "
 					WHERE
-						qb_username = '" . $this->_escape($user) . "' AND 
-						qb_action = '" . $this->_escape($action) . "' AND 
+						qb_username = '" . $this->_escape($user) . "' AND
+						qb_action = '" . $this->_escape($action) . "' AND
 						ident = '" . $this->_escape($ident) . "' ", $errnum, $errmsg);
 
 				$recur_lasttime = $existing['recur_lasttime'];
 			}
 		}
-		
+
 		if ($extra)
 		{
 			$extra = serialize($extra);
 		}
-		
+
 		return $this->_query("
-			INSERT INTO 
+			INSERT INTO
 				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . "
 			(
-				qb_username, 
-				qb_action, 
-				ident, 
-				extra,	
-				qbxml, 
+				qb_username,
+				qb_action,
+				ident,
+				extra,
+				qbxml,
 				priority,
-				run_every, 
-				recur_lasttime, 
+				run_every,
+				recur_lasttime,
 				enqueue_datetime
 			) VALUES (
-				'" . $this->_escape($user) . "', 
-				'" . $this->_escape($action) . "', 
+				'" . $this->_escape($user) . "',
+				'" . $this->_escape($action) . "',
 				'" . $this->_escape($ident) . "',
 				'" . $this->_escape($extra) . "',
-				'" . $this->_escape($qbxml) . "', 
-				" . (int) $priority . ",  
-				" . (int) $run_every . ", 
-				" . $recur_lasttime . ", 
-				'" . date('Y-m-d H:i:s') . "' 
+				'" . $this->_escape($qbxml) . "',
+				" . (int) $priority . ",
+				" . (int) $run_every . ",
+				" . $recur_lasttime . ",
+				'" . date('Y-m-d H:i:s') . "'
 			) ", $errnum, $errmsg);
 	}
-	
+
 	/**
 	 * Dequeue a recurring even that is schedule to be run
-	 * 
+	 *
 	 * @param string $user
 	 * @param boolean $by_priority
 	 * @return array
@@ -964,141 +964,141 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$sql = "
-			SELECT 
-				* 
+			SELECT
+				*
 			FROM
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . " 
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . "
 			WHERE
-				qb_username = '" . $this->_escape($user) . "' AND 	
+				qb_username = '" . $this->_escape($user) . "' AND
 				recur_lasttime + run_every <= " . time();
-		
+
 		if ($by_priority)
 		{
 			$sql .= ' ORDER BY priority DESC ';
 		}
-		
+
 		if ($arr = $this->_fetch($this->_query($sql . ' ', $errnum, $errmsg, 0, 1)))
 		{
 			// Update it, so it doesn't get fetched again until it's supposed to
 			$errnum = 0;
 			$errmsg = '';
 			$this->_query("UPDATE " . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE) . " SET recur_lasttime = " . time() . " WHERE quickbooks_recur_id = " . $arr['quickbooks_recur_id'], $errnum, $errmsg);
-			
+
 			return $arr;
 		}
-		
+
 		return false;
 	}
-	
+
 	/**
-	 * 
-	 * 
-	 * 
+	 *
+	 *
+	 *
 	 */
 	protected function _recurView($offset, $limit, $match)
 	{
-		
+
 		return new QuickBooks_Iterator();
 	}
-	
+
 	/**
 	 * Add an item to the queue
-	 * 
+	 *
 	 * @param string $action
 	 * @param mixed $ident
-	 * @return boolean 
+	 * @return boolean
 	 */
 	protected function _queueEnqueue($user, $action, $ident, $replace = true, $priority = 0, $extra = null, $qbxml = null)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if ($replace)
 		{
 			$this->_query("
-				DELETE FROM 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . " 
-				WHERE 
-					qb_username = '" . $this->_escape($user) . "' AND 
-					qb_action = '" . $this->_escape($action) . "' AND 
+				DELETE FROM
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
+				WHERE
+					qb_username = '" . $this->_escape($user) . "' AND
+					qb_action = '" . $this->_escape($action) . "' AND
 					ident = '" . $this->_escape($ident) . "' AND
 					qb_status = '" . QUICKBOOKS_STATUS_QUEUED . "' ", $errnum, $errmsg);
 		}
-		
+
 		if ($extra)
 		{
 			$extra = serialize($extra);
 		}
-		
+
 		return $this->_query("
-			INSERT INTO 
+			INSERT INTO
 				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
 			(
-				qb_username, 
-				qb_action, 
-				ident, 
-				extra,	
-				qbxml, 			
-				priority, 
-				qb_status, 
+				qb_username,
+				qb_action,
+				ident,
+				extra,
+				qbxml,
+				priority,
+				qb_status,
 				enqueue_datetime
 			) VALUES (
-				'" . $this->_escape($user) . "', 
-				'" . $this->_escape($action) . "', 
+				'" . $this->_escape($user) . "',
+				'" . $this->_escape($action) . "',
 				'" . $this->_escape($ident) . "',
 				'" . $this->_escape($extra) . "',
-				'" . $this->_escape($qbxml) . "', 
-				" . (int) $priority . ",  
-				'" . QUICKBOOKS_STATUS_QUEUED . "', 
-				'" . date('Y-m-d H:i:s') . "' 
+				'" . $this->_escape($qbxml) . "',
+				" . (int) $priority . ",
+				'" . QUICKBOOKS_STATUS_QUEUED . "',
+				'" . date('Y-m-d H:i:s') . "'
 			) ", $errnum, $errmsg);
 	}
-	
+
 	/**
 	 * Fetch a particular item from the queue
-	 * 
+	 *
 	 * @param integer $queue_id
-	 * @return array 
+	 * @return array
 	 */
 	protected function _queueFetch($user, $action, $ident, $status = QUICKBOOKS_STATUS_QUEUED)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if ($status)
 		{
 			$sql = "
-				SELECT 
-					* 
+				SELECT
+					*
 				FROM
 					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
 				WHERE
-					qb_username = '" . $this->_escape($user) . "' AND 
-					qb_action = '" . $this->_escape($action) . "' AND 
-					ident = '" . $this->_escape($ident) . "' AND 
+					qb_username = '" . $this->_escape($user) . "' AND
+					qb_action = '" . $this->_escape($action) . "' AND
+					ident = '" . $this->_escape($ident) . "' AND
 					qb_status = '" . $this->_escape($status) . "'  ";
 		}
 		else
 		{
 			$sql = "
-				SELECT 
-					* 
+				SELECT
+					*
 				FROM
 					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
 				WHERE
-					qb_username = '" . $this->_escape($user) . "' AND 
-					qb_action = '" . $this->_escape($action) . "' AND 
-					ident = '" . $this->_escape($ident) . "' ";			
+					qb_username = '" . $this->_escape($user) . "' AND
+					qb_action = '" . $this->_escape($action) . "' AND
+					ident = '" . $this->_escape($ident) . "' ";
 		}
-		
+
 		return $this->_fetch($this->_query($sql, $errnum, $errmsg, 0, 1));
 	}
-	
+
 	/**
 	 * Get the last time an action of this type was dequeued successfully for this user
-	 * 
+	 *
 	 * @param string $user
 	 * @param string $action
 	 * @return integer
@@ -1107,124 +1107,124 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$sql = "
 			SELECT
 				dequeue_datetime
 			FROM
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . " 
-			WHERE 
-				qb_username = '" . $this->_escape($user) . "' AND 
-				qb_status = '" . QUICKBOOKS_STATUS_SUCCESS . "' AND 
-				qb_action = '" . $this->_escape($action) . "' 
-			ORDER BY 
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
+			WHERE
+				qb_username = '" . $this->_escape($user) . "' AND
+				qb_status = '" . QUICKBOOKS_STATUS_SUCCESS . "' AND
+				qb_action = '" . $this->_escape($action) . "'
+			ORDER BY
 				dequeue_datetime DESC ";
-		
+
 		if ($arr = $this->_fetch($this->_query($sql, $errnum, $errmsg, 0, 1)))
 		{
 			return strtotime($arr['dequeue_datetime']);
 		}
-		
+
 		return null;
 	}
-	
+
 	/**
 	 * Get the last time an action of this type *and* with this ident was dequeued successfully for this user
-	 * 
+	 *
 	 * @param string $user
 	 * @param string $action
 	 * @param string $ident
-	 * @return integer 
+	 * @return integer
 	 */
 	protected function _queueActionIdentLast($user, $action, $ident)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$sql = "
 			SELECT
 				dequeue_datetime
 			FROM
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . " 
-			WHERE 
-				qb_username = '" . $this->_escape($user) . "' AND 
-				qb_status = '" . QUICKBOOKS_STATUS_SUCCESS . "' AND 
-				qb_action = '" . $this->_escape($action) . "' AND 
-				ident = '" . $this->_escape($ident) . "' 
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
+			WHERE
+				qb_username = '" . $this->_escape($user) . "' AND
+				qb_status = '" . QUICKBOOKS_STATUS_SUCCESS . "' AND
+				qb_action = '" . $this->_escape($action) . "' AND
+				ident = '" . $this->_escape($ident) . "'
 			ORDER BY
 				dequeue_datetime DESC ";
-		
+
 		$errnum = 0;
 		$errmsg = '';
 		if ($arr = $this->_fetch($this->_query($sql, $errnum, $errmsg, 0, 1)))
 		{
 			return strtotime($arr['dequeue_datetime']);
 		}
-		
+
 		return null;
 	}
-	
+
 	/**
 	 * Remove an item from the queue
-	 * 
+	 *
 	 * @param string $user
 	 * @param boolean $by_priority
-	 * @return array 
+	 * @return array
 	 */
 	protected function _queueDequeue($user, $by_priority = false)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$sql = "
-			SELECT 
-				* 
+			SELECT
+				*
 			FROM
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . " 
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
 			WHERE
-				qb_username = '" . $this->_escape($user) . "' AND 
+				qb_username = '" . $this->_escape($user) . "' AND
 				qb_status = '" . QUICKBOOKS_STATUS_QUEUED . "' ";
-		
+
 		if ($by_priority)
 		{
 			$sql .= ' ORDER BY priority DESC ';
 		}
-		
+
 		return $this->_fetch($this->_query($sql, $errnum, $errmsg, 0, 1));
 	}
-	
+
 	/**
 	 * Tell how many items are in the queue
-	 * 
+	 *
 	 * @return integer
 	 */
 	protected function _queueLeft($user, $queued = true)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		// SELECT * FROM quickbooks_queue WHERE qb_status = 'q'
 		$sql = "
-			SELECT 
-				COUNT(*) AS num_left 
-			FROM 
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . " 
-			WHERE 
+			SELECT
+				COUNT(*) AS num_left
+			FROM
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
+			WHERE
 				qb_username = '" . $this->_escape($user) . "' ";
-				
+
 		if ($queued)
 		{
 			$sql .= " AND qb_status = '" . QUICKBOOKS_STATUS_QUEUED . "' ";
 		}
-		
+
 		$arr = $this->_fetch($this->_query($sql, $errnum, $errmsg));
-		
+
 		return $arr['num_left'];
 	}
-	
+
 	/**
 	 * Tell how many items are in the queue table (queued or dequeued)
-	 * 
+	 *
 	 * @param string $match
 	 * @return integer
 	 */
@@ -1232,25 +1232,25 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$match = trim($match);
-		
+
 		if (strlen($match))
 		{
-			
+
 		}
 		else
 		{
 			$sql = "SELECT COUNT(*) AS total FROM " . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE);
 		}
-		
+
 		$arr = $this->_fetch($this->_query($sql, $errnum, $errmsg));
 		return $arr['total'];
 	}
-	
+
 	/**
 	 * Search for items in the queue
-	 * 
+	 *
 	 * @param integer $offset
 	 * @param integer $limit
 	 * @param string $match
@@ -1260,137 +1260,137 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$match = trim($match);
-		
+
 		$list = array();
-		
+
 		if (strlen($match))
 		{
-			
+
 		}
 		else
 		{
 			$sql = "
-				SELECT 
-					* 
-				FROM 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . " 
-				ORDER BY 
+				SELECT
+					*
+				FROM
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
+				ORDER BY
 					enqueue_datetime DESC ";
 			$res = $this->_query($sql, $errnum, $errmsg, $offset, $limit);
-			
+
 			while ($arr = $this->_fetch($res))
 			{
 				$list[] = $arr;
 			}
 		}
-		
+
 		return new QuickBooks_Iterator($list);
 	}
-	
+
 	/**
 	 * Update the status of an item in the queue
-	 * 
+	 *
 	 * @param string $ticket
 	 * @param string $action
 	 * @param mixed $ident
 	 * @param char $status
 	 * @param string $msg
-	 * @return boolean 
+	 * @return boolean
 	 */
 	protected function _queueStatus($ticket, $action, $ident, $new_status, $msg = null)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if ($ticket_id = $this->_ticketResolve($ticket))
 		{
 			$user = $this->authResolve($ticket);
-			
+
 			//print('action: ' . $action . ', ident: ' . $ident . ', new status: ' . $new_status . ', ticket_id: ' . $ticket_id . ', user: ' . $user . ', msg: ' . $msg);
-			
+
 			if ($new_status == QUICKBOOKS_STATUS_SUCCESS)
 			{
 				$this->_query("
-					UPDATE 
-						" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . " 
-					SET 
-						processed = processed + 1 
-					WHERE 					
+					UPDATE
+						" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . "
+					SET
+						processed = processed + 1
+					WHERE
 						quickbooks_ticket_id = " . (int) $ticket_id . " ", $errnum, $errmsg);
 			}
-			
+
 			if ($new_status == QUICKBOOKS_STATUS_PROCESSING)
 			{
 				$this->_query("
-					UPDATE 
+					UPDATE
 						" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
 					SET
-						qb_status = '" . $this->_escape($new_status) . "', 
+						qb_status = '" . $this->_escape($new_status) . "',
 						msg = '" . $this->_escape($msg) . "',
-						quickbooks_ticket_id = " . (int) $ticket_id . ", 
-						dequeue_datetime = '" . date('Y-m-d H:i:s') . "' 
-					WHERE 
-						qb_username = '" . $this->_escape($user) . "' AND 
-						qb_action = '" . $this->_escape($action) . "' AND 
-						ident = '" . $this->_escape($ident) . "' AND 
+						quickbooks_ticket_id = " . (int) $ticket_id . ",
+						dequeue_datetime = '" . date('Y-m-d H:i:s') . "'
+					WHERE
+						qb_username = '" . $this->_escape($user) . "' AND
+						qb_action = '" . $this->_escape($action) . "' AND
+						ident = '" . $this->_escape($ident) . "' AND
 						qb_status = '" . QUICKBOOKS_STATUS_QUEUED . "' ", $errnum, $errmsg, 0, 1);
 			}
 			else if ($new_status == QUICKBOOKS_STATUS_SUCCESS)
 			{
-				// You can only update to a SUCCESS status if you're currently 
+				// You can only update to a SUCCESS status if you're currently
 				//	in a PROCESSING status
-				
+
 				$sql = "
 					UPDATE
-						" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . " 
-					SET 
-						qb_status = '" . $this->_escape($new_status) . "', 
-						msg = '" . $this->_escape($msg) . "' 
+						" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
+					SET
+						qb_status = '" . $this->_escape($new_status) . "',
+						msg = '" . $this->_escape($msg) . "'
 					WHERE
-						quickbooks_ticket_id = " . (int) $ticket_id . " AND 
-						qb_username = '" . $this->_escape($user) . "' AND 
-						qb_action = '" . $this->_escape($action) . "' AND 
-						ident = '" . $this->_escape($ident) . "' AND 
+						quickbooks_ticket_id = " . (int) $ticket_id . " AND
+						qb_username = '" . $this->_escape($user) . "' AND
+						qb_action = '" . $this->_escape($action) . "' AND
+						ident = '" . $this->_escape($ident) . "' AND
 						qb_status = '" . QUICKBOOKS_STATUS_PROCESSING . "' ";
-				
+
 				$this->_query($sql, $errnum, $errmsg, 0, 1);
 			}
 			else
 			{
-				// There are some statuses which *can not be updated* because 
-				//	they're already removed from the queue. These are listed in 
+				// There are some statuses which *can not be updated* because
+				//	they're already removed from the queue. These are listed in
 				//	the NOT IN section
-				
+
 				$sql = "
 					UPDATE
-						" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . " 
-					SET 
-						qb_status = '" . $this->_escape($new_status) . "', 
-						msg = '" . $this->_escape($msg) . "' 
+						" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
+					SET
+						qb_status = '" . $this->_escape($new_status) . "',
+						msg = '" . $this->_escape($msg) . "'
 					WHERE
-						quickbooks_ticket_id = " . (int) $ticket_id . " AND 					
-						qb_username = '" . $this->_escape($user) . "' AND 
-						qb_action = '" . $this->_escape($action) . "' AND 
+						quickbooks_ticket_id = " . (int) $ticket_id . " AND
+						qb_username = '" . $this->_escape($user) . "' AND
+						qb_action = '" . $this->_escape($action) . "' AND
 						ident = '" . $this->_escape($ident) . "' AND
-						qb_status NOT IN ( 
-							'" . QUICKBOOKS_STATUS_SUCCESS . "', 
-							'" . QUICKBOOKS_STATUS_HANDLED . "', 
+						qb_status NOT IN (
+							'" . QUICKBOOKS_STATUS_SUCCESS . "',
+							'" . QUICKBOOKS_STATUS_HANDLED . "',
 							'" . QUICKBOOKS_STATUS_CANCELLED . "' ) ";
-				
+
 				$this->_query($sql, $errnum, $errmsg, 0, 1);
 			}
-			
+
 			return true;
 		}
-		
+
 		return false;
 	}
-	
+
 	/**
 	 * Tell how many items have been processed during this session
-	 * 
+	 *
 	 * @param string $ticket
 	 * @return integer
 	 */
@@ -1398,24 +1398,24 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		if ($arr = $this->_fetch($this->_query("
-			SELECT 
-				processed 
-			FROM 
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . " 
-			WHERE 
+			SELECT
+				processed
+			FROM
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE) . "
+			WHERE
 				ticket = '" . $this->_escape($ticket) . "' ", $errnum, $errmsg)))
 		{
 			return $arr['processed'];
 		}
-		
+
 		return 0;
 	}
-	
+
 	/**
 	 * Tell whether or not an item exists in the queue
-	 * 
+	 *
 	 * @param string $action
 	 * @param mixed $ident
 	 * @return boolean
@@ -1424,65 +1424,65 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		return $this->_count($this->_query("
-			SELECT 
+			SELECT
 				quickbooks_queue_id
 			FROM
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . " 
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE) . "
 			WHERE
-				qb_username = '" . $this->_escape($user) . "' AND 
-				qb_action = '" . $this->escape($action) . "' AND 
-				ident = '" . $this->escape($ident) . "' AND 
+				qb_username = '" . $this->_escape($user) . "' AND
+				qb_action = '" . $this->escape($action) . "' AND
+				ident = '" . $this->escape($ident) . "' AND
 				qb_status = '" . QUICKBOOKS_STATUS_QUEUED . "' ", $errnum, $errmsg)) > 0;
 	}
-	
+
 	/**
 	 * Resolve a mapping of a unique application ID to a QuickBooks ListID or TxnID
-	 * 
+	 *
 	 * @param string $user				The username to look up mappings for
 	 * @param string $objecttype		The type of object (see: QUICKBOOKS_OBJECT_*)
 	 * @param mixed $uniqueid			The unique application ID
 	 * @param string $editsequence		The edit sequence (if known/stored) will be returned here
-	 * @param mixed $extra				Any extra data you stored with the mapping will be placed here 
-	 * @return string					The QuickBooks ListID or TxnID 
+	 * @param mixed $extra				Any extra data you stored with the mapping will be placed here
+	 * @return string					The QuickBooks ListID or TxnID
 	 */
 	protected function _identToQuickBooks($user, $objecttype, $uniqueid, &$editsequence, &$extra)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$res = $this->_query("
-			SELECT 
-				qb_ident, 
-				editsequence, 
+			SELECT
+				qb_ident,
+				editsequence,
 				extra
-			FROM 
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_IDENTTABLE) . " 
-			WHERE 
-				qb_username = '" . $this->_escape($user) . "' AND 
-				qb_object = '" . $this->_escape($objecttype) . "' AND 
+			FROM
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_IDENTTABLE) . "
+			WHERE
+				qb_username = '" . $this->_escape($user) . "' AND
+				qb_object = '" . $this->_escape($objecttype) . "' AND
 				unique_id = '" . $this->_escape($uniqueid) . "' ", $errnum, $errmsg);
 		if ($this->_count($res))
 		{
 			$arr = $this->_fetch($res);
-			
+
 			$editsequence = $arr['editsequence'];
-			
+
 			if (strlen($arr['extra']))
 			{
 				$extra = unserialize($arr['extra']);
 			}
-			
+
 			return $arr['qb_ident'];
 		}
-		
+
 		return null;
 	}
-	
+
 	/**
 	 * Resolve a mapping of a QuickBooks ListID or TxnID to a unique application ID
-	 * 
+	 *
 	 * @param string $user			The username to resolve the mapping for
 	 * @param string $objecttype	The type of object (see: QUICKBOOKS_OBJECT_*)
 	 * @param string $qbid			The QuickBooks ListID or TxnID
@@ -1493,42 +1493,42 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$res = $this->_query("
-			SELECT 
-				unique_id, 
+			SELECT
+				unique_id,
 				extra
-			FROM 
-				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_IDENTTABLE) . " 
-			WHERE 
-				qb_username = '" . $this->_escape($user) . "' AND 
-				qb_object = '" . $this->_escape($objecttype) . "' AND 
+			FROM
+				" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_IDENTTABLE) . "
+			WHERE
+				qb_username = '" . $this->_escape($user) . "' AND
+				qb_object = '" . $this->_escape($objecttype) . "' AND
 				qb_ident = '" . $this->_escape($qbid) . "' ", $errnum, $errmsg);
 		if ($this->_count($res))
 		{
 			$arr = $this->_fetch($res);
-			
+
 			if (strlen($arr['extra']))
 			{
 				$extra = unserialize($arr['extra']);
 			}
-			
+
 			return $arr['unique_id'];
 		}
-		
+
 		return null;
 	}
-	
+
 	/**
 	 * Map a QuickBooks identifier (ListID, TxnID, etc.) to a QuickBooks object type and web application identifier
-	 * 
+	 *
 	 * @param string $user
 	 * @param string $object
 	 * @param mixed $uniqueid
 	 * @param string $qb_ident
 	 * @param string $editsequence
 	 * @param mixed $extra				Any extra data you want to store with the mapping
-	 * @return boolean 
+	 * @return boolean
 	 */
 	protected function _identMap($user, $objecttype, $uniqueid, $qb_ident, $editsequence = '', $extra = null)
 	{
@@ -1536,47 +1536,47 @@
 		{
 			$errnum = 0;
 			$errmsg = '';
-			
-			// Remove any conflicting records... 
+
+			// Remove any conflicting records...
 			$this->_query("
 				DELETE FROM
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_IDENTTABLE) . " 
-				WHERE 
-					qb_username = '" . $this->_escape($user) . "' AND 
-					qb_object = '" . $this->_escape($objecttype) . "' AND 
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_IDENTTABLE) . "
+				WHERE
+					qb_username = '" . $this->_escape($user) . "' AND
+					qb_object = '" . $this->_escape($objecttype) . "' AND
 					unique_id = '" . $this->_escape($uniqueid) . "' ", $errnum, $errmsg);
-			
+
 			// Insert the new mapping
 			return $this->_query("
 				INSERT INTO
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_IDENTTABLE) . " 
-				( 
-					qb_username, 
-					qb_object, 
-					unique_id, 
-					qb_ident, 
-					editsequence, 
-					extra, 
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_IDENTTABLE) . "
+				(
+					qb_username,
+					qb_object,
+					unique_id,
+					qb_ident,
+					editsequence,
+					extra,
 					map_datetime
 				)
 				VALUES
 				(
-					'" . $this->_escape($user) . "', 
-					'" . $this->_escape($objecttype) . "', 
-					'" . $this->_escape($uniqueid) . "', 
-					'" . $this->_escape($qb_ident) . "', 
-					'" . $this->_escape($editsequence) . "', 
-					'" . $this->_escape(serialize($extra)) . "', 
+					'" . $this->_escape($user) . "',
+					'" . $this->_escape($objecttype) . "',
+					'" . $this->_escape($uniqueid) . "',
+					'" . $this->_escape($qb_ident) . "',
+					'" . $this->_escape($editsequence) . "',
+					'" . $this->_escape(serialize($extra)) . "',
 					'" . date('Y-m-d H:i:s') . "'
 				) ", $errnum, $errmsg);
 		}
-		
+
 		return false;
 	}
-	
+
 	/**
-	 * 
-	 * 
+	 *
+	 *
 	 * @param integer $offset
 	 * @param integer $limit
 	 * @param string $match
@@ -1586,49 +1586,49 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$match = trim($match);
-		
+
 		$list = array();
-		
+
 		if (strlen($match))
 		{
-			
+
 		}
 		else
 		{
 			$sql = "
-				SELECT 
-					* 
-				FROM 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_IDENTTABLE) . " 
-				ORDER BY 
+				SELECT
+					*
+				FROM
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_IDENTTABLE) . "
+				ORDER BY
 					qb_username, qb_object, unique_id ";
 			$res = $this->_query($sql, $errnum, $errmsg, $offset, $limit);
-			
+
 			while ($arr = $this->_fetch($res))
 			{
 				$list[] = $arr;
 			}
 		}
-		
+
 		return new QuickBooks_Iterator($list);
 	}
-	
+
 	/**
-	 * 
-	 * 
+	 *
+	 *
 	 * @return integer
 	 */
 	protected function _identSize($match)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$match = trim($match);
-		
+
 		$list = array();
-		
+
 		if (strlen($match))
 		{
 			return 0;
@@ -1639,10 +1639,10 @@
 			return $arr['total'];
 		}
 	}
-	
+
 	/**
 	 * Truncate (if neccessary) the log and queue tables if they grow too large
-	 * 
+	 *
 	 * @param string $table
 	 * @param integer $max_history
 	 * @return void
@@ -1658,15 +1658,15 @@
 			case QUICKBOOKS_DRIVER_SQL_QUEUETABLE:
 				$sql = "
 					SELECT
-						quickbooks_queue_id 
+						quickbooks_queue_id
 					FROM
-						" . $this->_mapTableName($table) . " 
+						" . $this->_mapTableName($table) . "
 					WHERE
-						qb_status IN ( 
-							'" . QUICKBOOKS_STATUS_SUCCESS . "', 
-							'" . QUICKBOOKS_STATUS_HANDLED . "', 
-							'" . QUICKBOOKS_STATUS_CANCELLED . "', 
-							'" . QUICKBOOKS_STATUS_NOOP . "' ) 
+						qb_status IN (
+							'" . QUICKBOOKS_STATUS_SUCCESS . "',
+							'" . QUICKBOOKS_STATUS_HANDLED . "',
+							'" . QUICKBOOKS_STATUS_CANCELLED . "',
+							'" . QUICKBOOKS_STATUS_NOOP . "' )
 					ORDER BY
 						quickbooks_queue_id ASC LIMIT ";
 				$field = 'quickbooks_queue_id';
@@ -1676,22 +1676,22 @@
 				$field = 'quickbooks_ticket_id';
 				break;
 		}
-		
-		// How big is the log file? Should we auto-truncate it? 
+
+		// How big is the log file? Should we auto-truncate it?
 		$errnum = 0;
 		$errmsg = '';
 		$arr = $this->_fetch($this->_query("SELECT COUNT(*) AS counter FROM " . $this->_mapTableName($table), $errnum, $errmsg));
-		if ($arr['counter'] > $max_history and 
+		if ($arr['counter'] > $max_history and
 			$max_history > 0)
 		{
 			// Truncate the log to the size specified
-			
+
 			$start = time();
 			$cutoff = 5; 		// 5 seconds max cutoff time to avoid timeouts
-			
+
 			$limit = 100;
 			$list = array();
-			
+
 			$errnum = 0;
 			$errmsg = '';
 			$res = $this->_query($sql . floor($max_history / 2), $errnum, $errmsg);
@@ -1699,24 +1699,24 @@
 			{
 				// Delete it batches of $limit, keep under $cutoff seconds
 				$list[] = current($arr);
-				
+
 				if (count($list) > $limit)
 				{
 					$errnum = 0;
 					$errmsg = '';
-					
+
 					$this->_query("DELETE FROM " . $this->_mapTableName($table) . " WHERE " . $field . " IN ( " . implode(', ', $list) . " )", $errnum, $errmsg);
 					$list = array();
 				}
 			}
 		}
-		
+
 		return;
 	}
-	
+
 	/**
 	 * Write a message to the log file
-	 * 
+	 *
 	 * @param string $msg
 	 * @param string $ticket
 	 * @param integer $log_level
@@ -1728,66 +1728,66 @@
 		if ($batch == 0)
 		{
 			// We store a batch ID so that we can tell which logged messages go with which actual separate HTTP request
-			
+
 			$errnum = 0;
 			$errmsg = '';
-			
+
 			if ($arr = $this->_fetch($this->_query("SELECT MAX(batch) AS maxbatch FROM " . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_LOGTABLE) . " ", $errnum, $errmsg)))
 			{
 				$batch = (int) $arr['maxbatch'];
 			}
-			
+
 			$batch++;
 		}
-		
+
 		// Truncate log and queue tables
 		$this->_truncate(QUICKBOOKS_DRIVER_SQL_LOGTABLE, $this->_max_log_history);
 		$this->_truncate(QUICKBOOKS_DRIVER_SQL_QUEUETABLE, $this->_max_queue_history);
 		$this->_truncate(QUICKBOOKS_DRIVER_SQL_TICKETTABLE, $this->_max_ticket_history);
-		
+
 		// Actually insert the log message...
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		// Make sure the message isn't too long
 		$msg = substr($msg, 0, 65534);
-		
+
 		// Log level handling is handled by the QuickBooks_Driver base class (see public method {@link QuickBooks_Driver::log()})
 		if ($ticket_id = $this->_ticketResolve($ticket))
 		{
 			return $this->_query("
-				INSERT INTO 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_LOGTABLE) . " 
-				( 
+				INSERT INTO
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_LOGTABLE) . "
+				(
 					quickbooks_ticket_id,
-					batch, 
-					msg, 
-					log_datetime 
-				) VALUES ( 
+					batch,
+					msg,
+					log_datetime
+				) VALUES (
 					" . $ticket_id . ",
-					" . $batch . ", 
-					'" . $this->_escape($msg) . "', 
+					" . $batch . ",
+					'" . $this->_escape($msg) . "',
 					'" . date('Y-m-d H:i:s') . "' ) ", $errnum, $errmsg);
 		}
 		else
 		{
 			return $this->_query("
-				INSERT INTO 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_LOGTABLE) . " 
+				INSERT INTO
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_LOGTABLE) . "
 				(
 					batch,
-					msg, 
+					msg,
 					log_datetime
 				) VALUES (
-					" . $batch . ", 
+					" . $batch . ",
 					'" . $this->_escape($msg) . "',
 					'" . date('Y-m-d H:i:s') . "' ) ", $errnum, $errmsg);
 		}
 	}
 
 	/**
-	 * 
-	 * 
+	 *
+	 *
 	 * @param integer $offset
 	 * @param integer $limit
 	 * @param string $match
@@ -1797,42 +1797,42 @@
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$match = trim($match);
-		
+
 		$list = array();
-		
+
 		if (strlen($match))
 		{
-			
+
 		}
 		else
 		{
 			$sql = "
-				SELECT 
-					* 
-				FROM 
-					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_LOGTABLE) . " 
-				ORDER BY 
+				SELECT
+					*
+				FROM
+					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_LOGTABLE) . "
+				ORDER BY
 					quickbooks_log_id DESC ";
 			$res = $this->_query($sql, $errnum, $errmsg, $offset, $limit);
-			
+
 			while ($arr = $this->_fetch($res))
 			{
 				$list[] = $arr;
 			}
 		}
-		
+
 		return new QuickBooks_Iterator($list);
 	}
-	
+
 	protected function _logSize($match)
 	{
 		$errnum = 0;
 		$errmsg = '';
-		
+
 		$match = trim($match);
-		
+
 		if (strlen($match))
 		{
 			return 0;
@@ -1840,17 +1840,17 @@
 		else
 		{
 			$arr = $this->_fetch($this->_query("
-				SELECT 
-					COUNT(*) AS total 
-				FROM 
+				SELECT
+					COUNT(*) AS total
+				FROM
 					" . $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_LOGTABLE) . " ", $errnum, $errmsg));
 			return $arr['total'];
 		}
 	}
-	
+
 	/**
-	 * 
-	 * 
+	 *
+	 *
 	 * @return boolean
 	 */
 	protected function _noop()
@@ -1860,58 +1860,58 @@
 		$tmp = $this->_fetch($this->_query("SELECT 42 + 42 AS thesum ", $errnum, $errmsg));
 		return $tmp['thesum'] == 84;
 	}
-	
+
 	/**
 	 * Execute an SQL query against the database
-	 * 
+	 *
 	 * @param string $sql
 	 * @param integer $errnum
 	 * @param string $errmsg
 	 * @return resource
 	 */
 	public abstract function query($sql, &$errnum, &$errmsg, $offset = 0, $limit = null);
-	
+
 	/**
 	 * Escape a string
-	 * 
+	 *
 	 * @param string $str
 	 * @return string
 	 */
 	public abstract function escape($str);
-	
+
 	/**
 	 * Fetch a row from a result set
-	 * 
+	 *
 	 * @param resource $res
 	 * @return array
 	 */
 	public abstract function fetch($res);
-	
+
 	/**
 	 * Get the number of rows the last query affected
-	 * 
+	 *
 	 * @return integer
 	 */
 	public abstract function affected();
-	
+
 	/**
 	 * Get the last sequence value from the last SQL insert
-	 * 
+	 *
 	 * @return integer
 	 */
 	public abstract function last();
-	
+
 	/**
 	 * Get a count of the number of results in an SQL result set
-	 * 
+	 *
 	 * @param resource $res
 	 * @return integer
 	 */
 	public abstract function count($res);
-	
+
 	/**
 	 * Map a default table name to a database-specific table name
-	 * 
+	 *
 	 * @param string $table
 	 * @return string
 	 */
@@ -1919,10 +1919,10 @@
 	{
 		return QUICKBOOKS_DRIVER_SQL_PREFIX . $table;
 	}
-	
+
 	/**
 	 * Map a default encryption salt to a database-specific salt
-	 * 
+	 *
 	 * @param string $salt
 	 * @return string
 	 */
@@ -1930,37 +1930,37 @@
 	{
 		return $salt;
 	}
-	
+
 	/**
-	 * 
-	 * 
+	 *
+	 *
 	 */
 	protected function _generateCreatePrimaryKey($table, $key, $serial = true)
 	{
-		
+
 	}
-	
+
 	/**
-	 * 
-	 * 
+	 *
+	 *
 	 */
 	protected function _generateCreateForeignKey($table, $this_field, $references_that_field)
 	{
-		
+
 	}
-	
+
 	/**
-	 * 
+	 *
 	 */
 	protected function _generateFieldSchema($name, $def)
 	{
 		$sql = '';
-		
+
 		switch ($def[0])
 		{
 			case QUICKBOOKS_DRIVER_SQL_INTEGER:
 				$sql .= $name . ' INTEGER ';
-				
+
 				if (isset($def[2]))
 				{
 					if (strtolower($def[2]) == 'null')
@@ -1972,18 +1972,18 @@
 						$sql .= ' DEFAULT ' . (int) $def[2];
 					}
 				}
-				
+
 				break;
 			case QUICKBOOKS_DRIVER_SQL_DECIMAL:
 				$sql .= $name . ' DECIMAL ';
-		
+
 				if (!empty($def[1]))
 				{
 					$tmp = explode(",", $def[1]);
 					if(count($tmp) == 2)
 						$sql .= '(' . (int) $tmp[0] . ',' . (int) $tmp[1] . ') ';
 				}
-				
+
 				if (isset($def[2]))
 				{
 					if (strtolower($def[2]) == 'null')
@@ -2000,11 +2000,11 @@
 				}
 				if(isset($tmp))
 					unset($tmp);
-				
+
 				break;
 			case QUICKBOOKS_DRIVER_SQL_FLOAT:
 				$sql .= $name . ' FLOAT ';
-				
+
 				if (isset($def[2]))
 				{
 					if (strtolower($def[2]) == 'null')
@@ -2016,11 +2016,11 @@
 						$sql .= ' DEFAULT ' . sprintf('%01.2f', (float) $def[2]);
 					}
 				}
-				
+
 				break;
 			case QUICKBOOKS_DRIVER_SQL_BOOLEAN:
 				$sql .= $name . ' BOOLEAN ';
-				
+
 				if (isset($def[2]))
 				{
 					if (strtolower($def[2]) == 'null')
@@ -2040,11 +2040,11 @@
 				{
 					$sql .= ' NOT NULL ';
 				}
-				
+
 				break;
 			case QUICKBOOKS_DRIVER_SQL_DATE:
 				$sql .= $name . ' DATE ';
-				
+
 				if (isset($def[2]))
 				{
 					if (strtolower($def[2]) == 'null')
@@ -2056,16 +2056,16 @@
 				{
 					$sql .= ' NOT NULL ';
 				}
-				
+
 				break;
 			case QUICKBOOKS_DRIVER_SQL_TIME:
-				
-				
-				
+
+
+
 				break;
 			case QUICKBOOKS_DRIVER_SQL_DATETIME:
 				$sql .= $name . ' DATETIME ';
-				
+
 				if (isset($def[2]))
 				{
 					if (strtolower($def[2]) == 'null')
@@ -2077,22 +2077,22 @@
 				{
 					$sql .= ' NOT NULL ';
 				}
-				
+
 				break;
 			case QUICKBOOKS_DRIVER_SQL_VARCHAR:
 				$sql .= $name . ' VARCHAR';
-				
+
 				/*if ($name == 'ListID')
 				{
 					print('LIST ID:');
 					print_r($def);
 				}*/
-				
+
 				if (!empty($def[1]))
 				{
 					$sql .= '(' . (int) $def[1] . ') ';
 				}
-				
+
 				if (isset($def[2]))
 				{
 					if (strtolower($def[2]) == 'null')
@@ -2112,16 +2112,16 @@
 				{
 					$sql .= ' NOT NULL ';
 				}
-				
+
 				break;
 			case QUICKBOOKS_DRIVER_SQL_CHAR:
 				$sql .= $name . ' CHAR';
-				
+
 				if (!empty($def[1]))
 				{
 					$sql .= '(' . (int) $def[1] . ') ';
 				}
-				
+
 				if (isset($def[2]))
 				{
 					if (strtolower($def[2]) == 'null')
@@ -2137,12 +2137,12 @@
 				{
 					$sql .= ' NOT NULL ';
 				}
-				
+
 				break;
 			default:
 			case QUICKBOOKS_DRIVER_SQL_TEXT:
 				$sql .= $name . ' TEXT ';
-				
+
 				if (isset($def[2]))
 				{
 					if (strtolower($def[2]) == 'null')
@@ -2158,220 +2158,220 @@
 				{
 					$sql .= ' NOT NULL ';
 				}
-				
+
 				break;
 		}
-		
+
 		return $sql;
 	}
-	
+
 	protected function _generateCreateTable($name, $arr, $primary = array(), $keys = array())
 	{
 		$sql = '';
-		
+
 		foreach ($arr as $field => $def)
 		{
 			$sql .= "\t" . $this->_generateFieldSchema($field, $def) . ', ' . "\n";
 		}
-		
+
 		return array(
 			'CREATE TABLE ' . $name . ' ( ' . "\n" . substr($sql, 0, -3) . ' ); ',
 			);
 	}
-	
+
 	protected function _initialize($init_options = array())
 	{
 		$defaults = array(
-			//'quickbooks_api_enabled' => false, 
-			//'quickbooks_api_debug' => false, 
-			//'quickbooks_api_droptable' => false, 
-			//'quickbooks_api_print' => false, 
-			
-			'quickbooks_sql_enabled' => false, 
+			//'quickbooks_api_enabled' => false,
+			//'quickbooks_api_debug' => false,
+			//'quickbooks_api_droptable' => false,
+			//'quickbooks_api_print' => false,
+
+			'quickbooks_sql_enabled' => false,
 			'quickbooks_sql_schema' => realpath(dirname(__FILE__) . '/../data/schema'),
-			'quickbooks_sql_debug' => false, 
-			'quickbooks_sql_droptable' => false, 
+			'quickbooks_sql_debug' => false,
+			'quickbooks_sql_droptable' => false,
 			'quickbooks_sql_prefix' => QUICKBOOKS_DRIVER_SQL_PREFIX_SQL,
-			'quickbooks_sql_print' => false, 
-			
-			'quickbooks_integrator_enabled' => false, 
-			'quickbooks_integrator_prefix' => QUICKBOOKS_DRIVER_SQL_PREFIX_INTEGRATOR, 
+			'quickbooks_sql_print' => false,
+
+			'quickbooks_integrator_enabled' => false,
+			'quickbooks_integrator_prefix' => QUICKBOOKS_DRIVER_SQL_PREFIX_INTEGRATOR,
 			);
-		
+
 		$config = array_merge($defaults, $init_options);
-		
+
 		// list of SQL statements to run
 		$arr_sql = array();
-		
+
 		$table = $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_LOGTABLE);
 		$def = array(
-			'quickbooks_log_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ), 
+			'quickbooks_log_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
 			'quickbooks_ticket_id' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, null, 'null' ),
-			'batch' => array( QUICKBOOKS_DRIVER_SQL_INTEGER ), 
-			'msg' => array( QUICKBOOKS_DRIVER_SQL_TEXT ), 
-			'log_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
+			'batch' => array( QUICKBOOKS_DRIVER_SQL_INTEGER ),
+			'msg' => array( QUICKBOOKS_DRIVER_SQL_TEXT ),
+			'log_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
 			);
 		$primary = 'quickbooks_log_id';
 		$keys = array( 'quickbooks_ticket_id', 'batch' );
 		$uniques = array(  );
-		
+
 		$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
-		
+
 		$table = $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_QUEUETABLE);
 		$def = array(
-			'quickbooks_queue_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ), 
-			'quickbooks_ticket_id' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, null, 'null' ), 
-			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'qb_action' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 32 ), 
-			'ident' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'extra' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ), 
-			'qbxml' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ), 
-			'priority' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, 3, 0 ), 
-			'qb_status' => array( QUICKBOOKS_DRIVER_SQL_CHAR, 1 ), 
-			'msg' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ), 
-			'enqueue_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-			'dequeue_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME, null, 'null' ), 
+			'quickbooks_queue_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
+			'quickbooks_ticket_id' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, null, 'null' ),
+			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'qb_action' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 32 ),
+			'ident' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'extra' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ),
+			'qbxml' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ),
+			'priority' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, 3, 0 ),
+			'qb_status' => array( QUICKBOOKS_DRIVER_SQL_CHAR, 1 ),
+			'msg' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ),
+			'enqueue_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+			'dequeue_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME, null, 'null' ),
 			);
 		$primary = 'quickbooks_queue_id';
 		$keys = array( 'quickbooks_ticket_id', 'priority', array( 'qb_username', 'qb_action', 'ident', 'qb_status' ), 'qb_status' );
 		$uniques = array(  );
-		
+
 		$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
-		
+
 		$table = $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_RECURTABLE);
 		$def = array(
-			'quickbooks_recur_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ), 
-			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'qb_action' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 32 ), 
-			'ident' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'extra' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ), 
-			'qbxml' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ), 
-			'priority' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, 3, 0 ), 
-			'run_every' => array( QUICKBOOKS_DRIVER_SQL_INTEGER ), 
-			'recur_lasttime' => array( QUICKBOOKS_DRIVER_SQL_INTEGER ), 
-			'enqueue_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
+			'quickbooks_recur_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
+			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'qb_action' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 32 ),
+			'ident' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'extra' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ),
+			'qbxml' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ),
+			'priority' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, 3, 0 ),
+			'run_every' => array( QUICKBOOKS_DRIVER_SQL_INTEGER ),
+			'recur_lasttime' => array( QUICKBOOKS_DRIVER_SQL_INTEGER ),
+			'enqueue_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
 			);
 		$primary = 'quickbooks_recur_id';
 		$keys = array( array( 'qb_username', 'qb_action', 'ident' ), 'priority' );
 		$uniques = array(  );
-		
+
 		$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
-		
+
 		$table = $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_TICKETTABLE);
 		$def = array(
-			'quickbooks_ticket_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ), 
-			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'ticket' => array( QUICKBOOKS_DRIVER_SQL_CHAR, 32 ), 
-			'processed' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, null, 0 ), 
-			'lasterror_num' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 32, 'null' ), 
-			'lasterror_msg' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255, 'null' ), 
-			'ipaddr' => array( QUICKBOOKS_DRIVER_SQL_CHAR, 15 ), 
-			'write_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-			'touch_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
+			'quickbooks_ticket_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
+			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'ticket' => array( QUICKBOOKS_DRIVER_SQL_CHAR, 32 ),
+			'processed' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, null, 0 ),
+			'lasterror_num' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 32, 'null' ),
+			'lasterror_msg' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255, 'null' ),
+			'ipaddr' => array( QUICKBOOKS_DRIVER_SQL_CHAR, 15 ),
+			'write_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+			'touch_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
 			);
 		$primary = 'quickbooks_ticket_id';
 		$keys = array( 'ticket' );
 		$uniques = array(  );
-		
+
 		$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
-		
+
 		$table = $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_USERTABLE);
 		$def = array(
-			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'qb_password' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255 ), 
-			'qb_company_file' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255, 'null' ), 
-			'qbwc_wait_before_next_update' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, null, 0 ), 
-			'qbwc_min_run_every_n_seconds' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, null, 0 ), 
-			'status' => array( QUICKBOOKS_DRIVER_SQL_CHAR, 1 ), 
-			'write_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-			'touch_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
+			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'qb_password' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255 ),
+			'qb_company_file' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255, 'null' ),
+			'qbwc_wait_before_next_update' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, null, 0 ),
+			'qbwc_min_run_every_n_seconds' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, null, 0 ),
+			'status' => array( QUICKBOOKS_DRIVER_SQL_CHAR, 1 ),
+			'write_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+			'touch_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
 			);
 		$primary = 'qb_username';
 		$keys = array(  );
 		$uniques = array(  );
-		
+
 		$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
-		
+
 		$table = $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_IDENTTABLE);
 		$def = array(
 			'quickbooks_ident_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
-			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'qb_object' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'unique_id' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
+			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'qb_object' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'unique_id' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
 			'qb_ident' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
-			'editsequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),  
-			'extra' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ), 
-			'map_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
+			'editsequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'extra' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null, 'null' ),
+			'map_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
 			);
 		$primary = 'quickbooks_ident_id';
 		$keys = array(  );
 		$uniques = array( array( 'qb_username', 'qb_object', 'unique_id' ) );
-		
+
 		$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
-		
+
 		$table = $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_CONFIGTABLE);
 		$def = array(
 			'quickbooks_config_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
-			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'module' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'cfgkey' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'cfgval' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'cfgtype' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'cfgopts' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null ), 
-			'write_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-			'mod_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
+			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'module' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'cfgkey' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'cfgval' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'cfgtype' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'cfgopts' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null ),
+			'write_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+			'mod_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
 			);
 		$primary = 'quickbooks_config_id';
 		$keys = array(  );
 		$uniques = array( array( 'qb_username', 'module', 'cfgkey' ) );
-		
+
 		$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
-		
+
 		$table = $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_NOTIFYTABLE);
 		$def = array(
 			'quickbooks_notify_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
-			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'qb_object' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'unique_id' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'qb_ident' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'errnum' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, null, 'null' ), 
-			'errmsg' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null ), 
-			'note' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null ), 
-			'priority' => array( QUICKBOOKS_DRIVER_SQL_INTEGER ), 
-			'write_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-			'mod_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
+			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'qb_object' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'unique_id' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'qb_ident' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'errnum' => array( QUICKBOOKS_DRIVER_SQL_INTEGER, null, 'null' ),
+			'errmsg' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null ),
+			'note' => array( QUICKBOOKS_DRIVER_SQL_TEXT, null ),
+			'priority' => array( QUICKBOOKS_DRIVER_SQL_INTEGER ),
+			'write_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+			'mod_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
 			);
 		$primary = 'quickbooks_notify_id';
 		$keys = array(  );
 		$uniques = array(  );
-		
+
 		$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
-		
+
 		$table = $this->_mapTableName(QUICKBOOKS_DRIVER_SQL_CONNECTIONTABLE);
 		$def = array(
-			'quickbooks_connection_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ), 
-			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 12 ), 
-			'certificate' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255, 'null' ), 
-			'connection' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ), 
-			'application_id' => array( QUICKBOOKS_DRIVER_SQL_INTEGER ), 
-			'application_login' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ), 
-			'lasterror_num' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 32, 'null' ), 
-			'lasterror_msg' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255, 'null' ), 
-			'connection_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-			'write_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-			'touch_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
+			'quickbooks_connection_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
+			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+			'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 12 ),
+			'certificate' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255, 'null' ),
+			'connection' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ),
+			'application_id' => array( QUICKBOOKS_DRIVER_SQL_INTEGER ),
+			'application_login' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ),
+			'lasterror_num' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 32, 'null' ),
+			'lasterror_msg' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255, 'null' ),
+			'connection_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+			'write_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+			'touch_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
 			);
 		$primary = 'quickbooks_connection_id';
 		$keys = array(  );
 		$uniques = array(  );
-		
+
 		$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
 
 		//header('Content-Type: text/plain');
 		//print_r($arr_sql);
 		//exit;
-		
+
 		// Support for specialized integrator stuff
 		if ($config['quickbooks_integrator_enabled'])
 		{
@@ -2379,139 +2379,139 @@
 			$def = array(
 				'qbintegrator_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
 				'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
-				'qb_itemtype' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
+				'qb_itemtype' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
 				'ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
-				'TimeCreated' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-				'TimeModified' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-				'EditSequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-				'Name' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ), 
-				'FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ), 
-				'IsActive' => array( QUICKBOOKS_DRIVER_SQL_BOOLEAN ), 
+				'TimeCreated' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+				'TimeModified' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+				'EditSequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+				'Name' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ),
+				'FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ),
+				'IsActive' => array( QUICKBOOKS_DRIVER_SQL_BOOLEAN ),
 				'Parent_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
-				'Parent_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ), 
-				'ManufacturerPartNumber' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 31, 'null' ), 
-				'Account_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ), 
-				'Account_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ), 
-				'IncomeAccount_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ), 
-				'IncomeAccount_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ), 
-				'COGSAccount_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ), 
-				'COGSAccount_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ), 
-				'AssetAccount_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ), 
-				'AssetAccount_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ), 
-				'ExpenseAccount_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ), 
-				'ExpenseAccount_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ), 
-				'PrefVendor_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ), 
-				'PrefVendor_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ), 
+				'Parent_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ),
+				'ManufacturerPartNumber' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 31, 'null' ),
+				'Account_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ),
+				'Account_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ),
+				'IncomeAccount_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ),
+				'IncomeAccount_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ),
+				'COGSAccount_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ),
+				'COGSAccount_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ),
+				'AssetAccount_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ),
+				'AssetAccount_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ),
+				'ExpenseAccount_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ),
+				'ExpenseAccount_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ),
+				'PrefVendor_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40, 'null' ),
+				'PrefVendor_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT, 'null' ),
 				);
 			$primary = 'qbintegrator_id';
 			$keys = array( 'qb_username', 'Name' );
 			$uniques = array( );
-			
+
 			$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
-			
+
 			// @Todo Change these to constants in QuickBooks/Integrator.php
 			$table = 'qb_integrator_account';
 			$def = array(
 				'qbintegrator_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
 				'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
 				'ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
-				'TimeCreated' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-				'TimeModified' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-				'EditSequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-				'Name' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ), 
-				'FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ), 
-				'IsActive' => array( QUICKBOOKS_DRIVER_SQL_BOOLEAN ), 
+				'TimeCreated' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+				'TimeModified' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+				'EditSequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+				'Name' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ),
+				'FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ),
+				'IsActive' => array( QUICKBOOKS_DRIVER_SQL_BOOLEAN ),
 				'Parent_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
-				'Parent_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ), 
-				'AccountType' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ), 
-				'SpecialAccountType' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ), 
-				'AccountNumber' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ), 
-				'CashFlowClassification' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ), 				
+				'Parent_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ),
+				'AccountType' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ),
+				'SpecialAccountType' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ),
+				'AccountNumber' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ),
+				'CashFlowClassification' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ),
 				);
 			$primary = 'qbintegrator_id';
 			$keys = array( 'qb_username', 'Name', 'AccountType' );
 			$uniques = array( );
-			
+
 			$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
-			
+
 			$table = 'qb_integrator_paymentmethod';
 			$def = array(
 				'qbintegrator_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
 				'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
 				'ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
-				'TimeCreated' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-				'TimeModified' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-				'EditSequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-				'Name' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ), 
-				'IsActive' => array( QUICKBOOKS_DRIVER_SQL_BOOLEAN ), 
-				'PaymentMethodType' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ), 
+				'TimeCreated' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+				'TimeModified' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+				'EditSequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+				'Name' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ),
+				'IsActive' => array( QUICKBOOKS_DRIVER_SQL_BOOLEAN ),
+				'PaymentMethodType' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ),
 				);
 			$primary = 'qbintegrator_id';
 			$keys = array( 'qb_username', 'Name' );
 			$uniques = array( );
-			
-			$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));	
-			
+
+			$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
+
 			$table = 'qb_integrator_shipmethod';
 			$def = array(
 				'qbintegrator_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
 				'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
 				'ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
-				'TimeCreated' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-				'TimeModified' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-				'EditSequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-				'Name' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ), 
-				'IsActive' => array( QUICKBOOKS_DRIVER_SQL_BOOLEAN ), 
+				'TimeCreated' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+				'TimeModified' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+				'EditSequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+				'Name' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ),
+				'IsActive' => array( QUICKBOOKS_DRIVER_SQL_BOOLEAN ),
 				);
 			$primary = 'qbintegrator_id';
 			$keys = array( 'qb_username', 'Name' );
 			$uniques = array( );
-			
-			$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));				
-			
+
+			$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
+
 			// CustomerTypes
 			$table = 'qb_integrator_customertype';
 			$def = array(
 				'qbintegrator_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
 				'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
 				'ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
-				'TimeCreated' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-				'TimeModified' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-				'EditSequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ), 
-				'Name' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ), 
-				'FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ), 
-				'IsActive' => array( QUICKBOOKS_DRIVER_SQL_BOOLEAN ), 
+				'TimeCreated' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+				'TimeModified' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+				'EditSequence' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
+				'Name' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 100 ),
+				'FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ),
+				'IsActive' => array( QUICKBOOKS_DRIVER_SQL_BOOLEAN ),
 				'Parent_ListID' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
-				'Parent_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ), 
+				'Parent_FullName' => array( QUICKBOOKS_DRIVER_SQL_TEXT ),
 				);
 			$primary = 'qbintegrator_id';
 			$keys = array( 'qb_username', 'Name' );
 			$uniques = array( );
-			
+
 			$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
-			
+
 			// mapping table
 			$table = 'qb_integrator_mapping';
 			$def = array(
 				'qbintegrator_id' => array( QUICKBOOKS_DRIVER_SQL_SERIAL ),
 				'qb_username' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 40 ),
-				'map_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ), 
-				'QuickBooks_Name_or_RefNumber' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255 ), 
+				'map_datetime' => array( QUICKBOOKS_DRIVER_SQL_DATETIME ),
+				'QuickBooks_Name_or_RefNumber' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255 ),
 				'Integrator_Name_or_RefNumber' => array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 255 ),
 				);
 			$primary = 'qbintegrator_id';
 			$keys = array( 'qb_username', 'Integrator_Name_or_RefNumber' );
 			$uniques = array( array( 'qb_username', 'QuickBooks_Name_or_RefNumber', 'Integrator_Name_or_RefNumber' ) );
-			
+
 			$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($table, $def, $primary, $keys, $uniques));
 		}
-		
+
 		// Support for mirroring the QuickBooks database in an SQL database
 		if ($config['quickbooks_sql_enabled'])
 		{
 			$tables = array();
-			
-			// Use the QuickBooks_SQL_Schema class 
+
+			// Use the QuickBooks_SQL_Schema class
 			$dh = opendir($defaults['quickbooks_sql_schema']);
 			while (false !== ($file = readdir($dh)))
 			{
@@ -2519,25 +2519,25 @@
 				{
 					continue;
 				}
-				
+
 				$xml = file_get_contents($defaults['quickbooks_sql_schema'] . '/' . $file);
-				
+
 				QuickBooks_SQL_Schema::mapSchemaToSQLDefinition($xml, $tables);
-				
+
 				// This times out on some SQL connections because it takes so darn long to generate the
 				//	schema. Thus, we're going to issue a few useless queries here, just so we don't lose
 				//	the connection to the database.
 				$this->noop();
 			}
-			
+
 			// A table has to be created for each query type, and each table has to have some extra fields added to it
 			foreach ($tables as $table)
 			{
 				// @TODO Support other transformations (table names to uppercase, field names to lowercase, etc.)
 				$name = strtolower($config['quickbooks_sql_prefix'] . $table[0]);
-				
+
 				$idfield = array( QUICKBOOKS_DRIVER_SQL_SERIAL, null, 0 );
-				
+
 				$ifield = array( QUICKBOOKS_DRIVER_SQL_DATETIME, null, 'null' );		// Date/time when first inserted
 				$ufield = array( QUICKBOOKS_DRIVER_SQL_DATETIME, null, 'null' );		// Date/time when updated (re-sync from QuickBooks)
 				$mfield = array( QUICKBOOKS_DRIVER_SQL_TIMESTAMP, null, 'null' );		// Date/time when modified by a user (needs to be pushed to QB)
@@ -2545,55 +2545,55 @@
 				//$dfield = array( QUICKBOOKS_DRIVER_SQL_DATETIME, null, 'null' );		// Date/time when deleted by a user (needs to be deleted from QB)
 				//$cfield = array( QUICKBOOKS_DRIVER_SQL_TIMESTAMP_ON_INSERT, null, 'NOW()' );
 				//$mfield = array( QUICKBOOKS_DRIVER_SQL_TIMESTAMP_ON_INSERT_OR_UPDATE, null, 'NOW()' );
-				
-				// This should be an VARCHAR, QuickBooks errors are sometimes in the format "0x12341234" 
+
+				// This should be an VARCHAR, QuickBooks errors are sometimes in the format "0x12341234"
 				$enfield = array( QUICKBOOKS_DRIVER_SQL_VARCHAR, 32, 'null' );			// Add/Mod error number
 				$emfield = array( QUICKBOOKS_DRIVER_SQL_TEXT, null, null );				// Add/Mod error message
 				$enqfield = array( QUICKBOOKS_DRIVER_SQL_DATETIME, null, 'null' );		// Add/Mod enqueue date/time
 				$deqfield = array( QUICKBOOKS_DRIVER_SQL_DATETIME, null, 'null' );		// Add/Mod dequeue date/time
-				
+
 				$to_delete_field = array( QUICKBOOKS_DRIVER_SQL_BOOLEAN, null, 0 );		// Flag it for deletion
 				$to_skip_field = array( QUICKBOOKS_DRIVER_SQL_BOOLEAN, null, 0 );		// Flag it for skipping
 				$to_sync_field = array( QUICKBOOKS_DRIVER_SQL_BOOLEAN, null, 0 );
-				
+
 				$flag_deleted_field = array( QUICKBOOKS_DRIVER_SQL_BOOLEAN, null, 0 );	// This has been deleted within QuickBooks
 				$flag_skipped_field = array( QUICKBOOKS_DRIVER_SQL_BOOLEAN, null, 0 );	// This has been skipped within the sync to QuickBooks
-				
+
 				$fields = $table[1];
-				
+
 				$fields = array_merge( array( QUICKBOOKS_DRIVER_SQL_FIELD_ID => $idfield ), $fields );
-				
+
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_DISCOVER] = $ifield;
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_RESYNC] = $ufield;
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_MODIFY] = $mfield;
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_HASH] = $hfield;
 				//$fields[QUICKBOOKS_DRIVER_SQL_FIELD_DELETE] = $dfield;
-				
+
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_ERROR_NUMBER] = $enfield;
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_ERROR_MESSAGE] = $emfield;
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_ENQUEUE_TIME] = $enqfield;
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_DEQUEUE_TIME] = $deqfield;
-				
+
 				//$fields[QUICKBOOKS_DRIVER_SQL_FIELD_DELETED_FLAG] = $delflagfield;
-				
+
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_TO_SYNC] = $to_sync_field;
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_TO_DELETE] = $to_delete_field;
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_TO_SKIP] = $to_skip_field;
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_FLAG_DELETED] = $flag_deleted_field;
 				$fields[QUICKBOOKS_DRIVER_SQL_FIELD_FLAG_SKIPPED] = $flag_skipped_field;
-                
+
 				$primary = QUICKBOOKS_DRIVER_SQL_FIELD_ID;
 				//$keys = array();
 				//$uniques = array( $table[2] );
 				//$uniques = array();
-				
-				
+
+
 				$keys = $table[3];
 				$uniques = $table[4];
-				
+
 				// @TODO Fix this to support unique keys
 				$keys = array_merge($keys, $uniques);
-				
+
 				/*
 				print('keys: ');
 				print_r($keys);
@@ -2602,12 +2602,12 @@
 				print_r($uniques);
 				exit;
 				*/
-				
+
 				$arr_sql = array_merge($arr_sql, $this->_generateCreateTable($name, $fields, $primary, $keys));
 			}
 		}
-		
-		// Run each CREATE TABLE statement... 
+
+		// Run each CREATE TABLE statement...
 		foreach ($arr_sql as $sql)
 		{
 			if ($config['quickbooks_sql_debug'] or $config['quickbooks_sql_print'])
@@ -2618,19 +2618,19 @@
 			{
 				$errnum = 0;
 				$errmsg = '';
-				
+
 				//print($sql);
-				
+
 				$this->_query($sql, $errnum, $errmsg);
 			}
 		}
-		
+
 		//exit;
 	}
-	
+
 	/**
-	 * 
-	 * 
+	 *
+	 *
 	 * @param string $table
 	 * @param array $restrict
 	 * @return object
@@ -2639,32 +2639,32 @@
 	{
 		$sql = '';
 		$where = array();
-		
+
 		if (count($restrict))
 		{
 			foreach ($restrict as $field => $value)
 			{
 				$where[] = $field . " = '" . $this->_escape($value) . "' ";
 			}
-			
+
 			$errnum = 0;
 			$errmsg = '';
-			if ($res = $this->_query("SELECT * FROM " . $this->_escape($table) . " WHERE " . implode(' AND ', $where) . " ", $errnum, $errmsg, 0, 1) and 
+			if ($res = $this->_query("SELECT * FROM " . $this->_escape($table) . " WHERE " . implode(' AND ', $where) . " ", $errnum, $errmsg, 0, 1) and
 				$arr = $this->_fetch($res))
 			{
-				// @TODO This should be returning an array, not dependent on something outside of it's class tree... 
+				// @TODO This should be returning an array, not dependent on something outside of it's class tree...
 				return new QuickBooks_SQL_Object($table, null, $arr);
 			}
 		}
-		
+
 		return false;
 	}
-	
+
 	/**
 	 * Update a record in the SQL table
-	 * 
+	 *
 	 * @todo We should make this support only passing a single $where component, instead of an array of array where components
-	 * 
+	 *
 	 * @param string $table			The table to update
 	 * @param object $object		An object containing a record to update
 	 * @param array $where			An array to use to build the WHERE clause
@@ -2674,13 +2674,13 @@
 	{
 		$sql = '';
 		$set = array();
-		
+
 		if (is_object($object))
 		{
 			$object = $object->asArray();
 		}
-		
-		// 
+
+		//
 		foreach ($object as $field => $value)
 		{
 			// Commented out because doing this to very large integers (i.e. ItemRef/FullName is a large integer SKU) causes integer overflow
@@ -2693,7 +2693,7 @@
 				$set[] = $field . " = '" . $this->_escape($value) . "' ";
 			//}
 		}
-		
+
 		$wheres = array();
 		foreach ($where as $part)
 		{
@@ -2702,53 +2702,53 @@
 				$wheres[] = $field . " = '" . $this->_escape($value) . "' ";
 			}
 		}
-		
+
 		$sql = "UPDATE " . $this->_escape($table) . " SET " . implode(', ', $set);
-		
+
 		if ($resync)
 		{
 			$sql .= ", " . QUICKBOOKS_DRIVER_SQL_FIELD_RESYNC . " = NOW() ";
 		}
-		
+
 		$sql .= " WHERE " . implode(' AND ', $wheres);
-		
+
 		$errnum = 0;
 		$errmsg = '';
 		$return = $this->_query($sql, $errnum, $errmsg);
-		
+
 		if (is_null($discov))
 		{
 			$discov = $resync;
 		}
-		
+
 		if ($discov)
 		{
 			// Update the discover datetime *IF THE DISCOVER DATETIME IS NULL*
-			//	This happens when an AddResponse is received, and we need to 
-			//	update a record that has just been added to QuickBooks. If we 
-			//	don't mark it as discovered, then updates to the record will 
+			//	This happens when an AddResponse is received, and we need to
+			//	update a record that has just been added to QuickBooks. If we
+			//	don't mark it as discovered, then updates to the record will
 			//	never be picked up and sent to QuickBooks
-			
+
 			$errnum = 0;
 			$errmsg = '';
-			
+
 			$wheres[] = QUICKBOOKS_DRIVER_SQL_FIELD_DISCOVER . " IS NULL ";
-			
+
 			$this->_query("
-				UPDATE 
+				UPDATE
 					" . $this->_escape($table) . "
-				SET 
+				SET
 					" . QUICKBOOKS_DRIVER_SQL_FIELD_DISCOVER . " = " . QUICKBOOKS_DRIVER_SQL_FIELD_RESYNC . "
 				WHERE
 					" . implode(' AND ', $wheres), $errnum, $errmsg);
 		}
-		
+
 		return $return;
 	}
-	
+
 	/**
 	 * Insert a new record into an SQL table
-	 * 
+	 *
 	 * @param string $table
 	 * @param object $object
 	 * @return boolean
@@ -2758,24 +2758,24 @@
 		$sql = '';
 		$fields = array();
 		$values = array();
-		
+
 		if (is_object($object))
 		{
 			$object = $object->asArray();
 		}
-		
+
 		foreach ($object as $field => $value)
 		{
 			$fields[] = $field;
-	
+
 			/*
 			// * POSSIBLE FIX FOR BELOW CODE *
-			
+
 if ( strlen((int) $value) == strlen($value) and
 ((int)$value) == $value and
-ctype_digit($value) )		
+ctype_digit($value) )
 			*/
-			
+
 			// Commented out because doing this to very large integers (i.e. ItemRef/FullName is a large integer SKU) causes integer overflow
 			/*if (strlen((int) $value) == strlen($value))
 			{
@@ -2786,31 +2786,31 @@
 				$values[] = " '" . $this->_escape($value) . "' ";
 			//}
 		}
-		
+
 		$sql = "INSERT INTO " . $this->_escape($table) . " ( " . implode(', ', $fields) . " ";
-		
+
 		if ($discov_and_resync)
 		{
 			$sql .= ", " . QUICKBOOKS_DRIVER_SQL_FIELD_DISCOVER . ", " . QUICKBOOKS_DRIVER_SQL_FIELD_RESYNC . " ";
 		}
-		
+
 		$sql .= " ) VALUES ( " . implode(', ', $values) . " ";
-		
+
 		if ($discov_and_resync)
 		{
 			$sql .= ", NOW(), NOW() ";
 		}
-		
+
 		$sql .= " ); ";
-		
+
 		$errnum = 0;
 		$errmsg = '';
 		return $this->_query($sql, $errnum, $errmsg);
 	}
-	
+
 	/**
-	 * 
-	 * 
+	 *
+	 *
 	 * @param string $table
 	 * @param array $where
 	 * @return boolean
@@ -2818,7 +2818,7 @@
 	public function delete($table, $where)
 	{
 		$sql = '';
-		
+
 		$wheres = array();
 		foreach ($where as $part)
 		{
@@ -2827,11 +2827,11 @@
 				$wheres[] = $field . " = '" . $this->_escape($value) . "' ";
 			}
 		}
-		
+
 		$sql = "DELETE FROM " . $this->_escape($table);
-		
+
 		$sql .= " WHERE " . implode(' AND ', $wheres);
-		
+
 		$errnum = 0;
 		$errmsg = '';
 		return $this->_query($sql, $errnum, $errmsg);
Index: QuickBooks/Server/SQL/Callbacks.php
===================================================================
--- QuickBooks/Server/SQL/Callbacks.php	(revision 13297)
+++ QuickBooks/Server/SQL/Callbacks.php	(working copy)
@@ -188,7 +188,9 @@
 				$object = QuickBooks_Utilities::actionToObject($action);
 				
 				$table_and_field = array();
-				
+
+if (!isset($table_and_field[0])) continue;				
+
 				// Convert to table and primary key, select qbsql id
 				QuickBooks_SQL_Schema::mapPrimaryKey($object, QUICKBOOKS_SQL_SCHEMA_MAP_TO_SQL, $table_and_field);  
 				
@@ -2237,6 +2239,222 @@
 	}
 	
 	/**
+	 * 
+	 * 
+	 * 
+	 */
+	public static function CheckAddRequest($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale, $config = array())
+	{
+		$Driver = QuickBooks_Driver_Singleton::getInstance();
+		if ($Account = $Driver->get(QUICKBOOKS_DRIVER_SQL_PREFIX_SQL . 'check', array( QUICKBOOKS_DRIVER_SQL_FIELD_ID => $ID )))
+		{
+			return QuickBooks_Server_SQL_Callbacks::_AddRequest(QUICKBOOKS_OBJECT_CHECK, $Account, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $version, $locale, $config);
+		}
+		
+		return ''; 
+	}
+	
+	/**
+	 * 
+	 * 
+	 * 
+	 */
+	public static function CheckAddResponse($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents, $config = array() )
+	{
+		$Parser = new QuickBooks_XML_Parser($xml);
+		
+		$errnum = 0;
+		$errmsg = '';
+		$Doc = $Parser->parse($errnum, $errmsg);
+		$Root = $Doc->getRoot();		
+		
+		$List = $Root->getChildAt('QBXML QBXMLMsgsRs CheckAddRs');
+		
+		$extra['IsAddResponse'] = true;
+		QuickBooks_Server_SQL_Callbacks::_QueryResponse(QUICKBOOKS_OBJECT_CHECK, $List, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $xml, $idents, $config);
+	}
+
+	/**
+	 * Generate a qbXML CheckMod request to update an check
+	 */
+	public static function CheckModRequest($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale, $config = array())
+	{
+		//$Driver = QuickBooks_Driver_Singleton::getInstance();
+		//$args = func_get_args();
+		//$Driver->log('got in: ' . print_r($args, true));
+	
+		$Driver = QuickBooks_Driver_Singleton::getInstance();
+		if ($Check = $Driver->get(QUICKBOOKS_DRIVER_SQL_PREFIX_SQL . 'check', array( QUICKBOOKS_DRIVER_SQL_FIELD_ID => $ID )))
+		{
+			return QuickBooks_Server_SQL_Callbacks::_AddRequest(QUICKBOOKS_OBJECT_CHECK, $Check, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $version, $locale, $config);
+		}
+		
+		return ''; 
+	}
+	
+	/**
+	 * Handle an CheckMod response from QuickBooks
+	 */
+	public static function CheckModResponse($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents, $config = array() )
+	{
+		$Parser = new QuickBooks_XML_Parser($xml);
+		
+		$errnum = 0;
+		$errmsg = '';
+		$Doc = $Parser->parse($errnum, $errmsg);
+		$Root = $Doc->getRoot();	
+		
+		$List = $Root->getChildAt('QBXML QBXMLMsgsRs CheckModRs');
+		
+		$extra['IsModResponse'] = true;
+		QuickBooks_Server_SQL_Callbacks::_QueryResponse(QUICKBOOKS_OBJECT_CHECK, $List, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $xml, $idents, $config);
+	}
+	
+	/**
+	 * 
+	 * 
+	 * 
+	 */
+	public static function DepositAddRequest($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale, $config = array())
+	{
+		$Driver = QuickBooks_Driver_Singleton::getInstance();
+		if ($Account = $Driver->get(QUICKBOOKS_DRIVER_SQL_PREFIX_SQL . 'deposit', array( QUICKBOOKS_DRIVER_SQL_FIELD_ID => $ID )))
+		{
+			return QuickBooks_Server_SQL_Callbacks::_AddRequest(QUICKBOOKS_OBJECT_DEPOSIT, $Account, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $version, $locale, $config);
+		}
+		
+		return ''; 
+	}
+	
+	/**
+	 * 
+	 * 
+	 * 
+	 */
+	public static function DepositAddResponse($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents, $config = array() )
+	{
+		$Parser = new QuickBooks_XML_Parser($xml);
+		
+		$errnum = 0;
+		$errmsg = '';
+		$Doc = $Parser->parse($errnum, $errmsg);
+		$Root = $Doc->getRoot();		
+		
+		$List = $Root->getChildAt('QBXML QBXMLMsgsRs DepositAddRs');
+		
+		$extra['IsAddResponse'] = true;
+		QuickBooks_Server_SQL_Callbacks::_QueryResponse(QUICKBOOKS_OBJECT_DEPOSIT, $List, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $xml, $idents, $config);
+	}
+
+	/**
+	 * Generate a qbXML DepositMod request to update an deposit
+	 */
+	public static function DepositModRequest($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale, $config = array())
+	{
+		//$Driver = QuickBooks_Driver_Singleton::getInstance();
+		//$args = func_get_args();
+		//$Driver->log('got in: ' . print_r($args, true));
+	
+		$Driver = QuickBooks_Driver_Singleton::getInstance();
+		if ($Deposit = $Driver->get(QUICKBOOKS_DRIVER_SQL_PREFIX_SQL . 'deposit', array( QUICKBOOKS_DRIVER_SQL_FIELD_ID => $ID )))
+		{
+			return QuickBooks_Server_SQL_Callbacks::_AddRequest(QUICKBOOKS_OBJECT_DEPOSIT, $Deposit, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $version, $locale, $config);
+		}
+		
+		return ''; 
+	}
+	
+	/**
+	 * Handle an DepositMod response from QuickBooks
+	 */
+	public static function DepositModResponse($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents, $config = array() )
+	{
+		$Parser = new QuickBooks_XML_Parser($xml);
+		
+		$errnum = 0;
+		$errmsg = '';
+		$Doc = $Parser->parse($errnum, $errmsg);
+		$Root = $Doc->getRoot();	
+		
+		$List = $Root->getChildAt('QBXML QBXMLMsgsRs DepositModRs');
+		
+		$extra['IsModResponse'] = true;
+		QuickBooks_Server_SQL_Callbacks::_QueryResponse(QUICKBOOKS_OBJECT_DEPOSIT, $List, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $xml, $idents, $config);
+	}
+	
+	/**
+	 * 
+	 * 
+	 * 
+	 */
+	public static function JournalEntryAddRequest($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale, $config = array())
+	{
+		$Driver = QuickBooks_Driver_Singleton::getInstance();
+		if ($Account = $Driver->get(QUICKBOOKS_DRIVER_SQL_PREFIX_SQL . 'journalentry', array( QUICKBOOKS_DRIVER_SQL_FIELD_ID => $ID )))
+		{
+			return QuickBooks_Server_SQL_Callbacks::_AddRequest(QUICKBOOKS_OBJECT_JOURNALENTRY, $Account, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $version, $locale, $config);
+		}
+		
+		return ''; 
+	}
+	
+	/**
+	 * 
+	 * 
+	 * 
+	 */
+	public static function JournalEntryAddResponse($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents, $config = array() )
+	{
+		$Parser = new QuickBooks_XML_Parser($xml);
+		
+		$errnum = 0;
+		$errmsg = '';
+		$Doc = $Parser->parse($errnum, $errmsg);
+		$Root = $Doc->getRoot();		
+		
+		$List = $Root->getChildAt('QBXML QBXMLMsgsRs JournalEntryAddRs');
+		
+		$extra['IsAddResponse'] = true;
+		QuickBooks_Server_SQL_Callbacks::_QueryResponse(QUICKBOOKS_OBJECT_JOURNALENTRY, $List, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $xml, $idents, $config);
+	}
+
+	/**
+	 * Generate a qbXML JournalEntryMod request to update an journalentry
+	 */
+	public static function JournalEntryModRequest($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale, $config = array())
+	{
+		//$Driver = QuickBooks_Driver_Singleton::getInstance();
+		//$args = func_get_args();
+		//$Driver->log('got in: ' . print_r($args, true));
+	
+		$Driver = QuickBooks_Driver_Singleton::getInstance();
+		if ($JournalEntry = $Driver->get(QUICKBOOKS_DRIVER_SQL_PREFIX_SQL . 'journalentry', array( QUICKBOOKS_DRIVER_SQL_FIELD_ID => $ID )))
+		{
+			return QuickBooks_Server_SQL_Callbacks::_AddRequest(QUICKBOOKS_OBJECT_JOURNALENTRY, $JournalEntry, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $version, $locale, $config);
+		}
+		
+		return ''; 
+	}
+	
+	/**
+	 * Handle an JournalEntryMod response from QuickBooks
+	 */
+	public static function JournalEntryModResponse($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents, $config = array() )
+	{
+		$Parser = new QuickBooks_XML_Parser($xml);
+		
+		$errnum = 0;
+		$errmsg = '';
+		$Doc = $Parser->parse($errnum, $errmsg);
+		$Root = $Doc->getRoot();	
+		
+		$List = $Root->getChildAt('QBXML QBXMLMsgsRs JournalEntryModRs');
+		
+		$extra['IsModResponse'] = true;
+		QuickBooks_Server_SQL_Callbacks::_QueryResponse(QUICKBOOKS_OBJECT_JOURNALENTRY, $List, $requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $xml, $idents, $config);
+	}
+	
+	/**
 	 * Generate a JobTypeAdd qbXML request to send to QuickBooks
 	 */
 	public static function JobTypeAddRequest($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale, $config = array())
@@ -7226,7 +7444,7 @@
 			
 		// Find out if we need to iterate further to get more results
 		$matches = array();
-		$iterator_count = ereg('iteratorRemainingCount="([0-9]*)" iteratorID="([^"]*)"', $xml, $matches);
+		$iterator_count = @ereg('iteratorRemainingCount="([0-9]*)" iteratorID="([^"]*)"', $xml, $matches);
 			
 		// If an iterator was used and there's results remaining 
 		if ($iterator_count !== false and 
Index: QuickBooks/Server/SQL.php
===================================================================
--- QuickBooks/Server/SQL.php	(revision 13297)
+++ QuickBooks/Server/SQL.php	(working copy)
@@ -199,7 +199,9 @@
 		}
 		
 		// Map of callback handlers 		
-		$sql_map = array();
+//		$sql_map = array();
+// Hack for CPNP
+$sql_map = (array) $map;
 		
 		foreach (get_class_methods('QuickBooks_Server_SQL_Callbacks') as $method)
 		{
Index: QuickBooks/SQL/Schema.php
===================================================================
--- QuickBooks/SQL/Schema.php	(revision 13297)
+++ QuickBooks/SQL/Schema.php	(working copy)
@@ -1631,11 +1631,13 @@
 			
 			'ReceivePaymentRet DepositToAccountRef' => 							array( null, null ), 
 			'ReceivePaymentRet DepositToAccountRef *' => 						array( 'ReceivePayment', 'DepositToAccount_*' ), 
+/*
 			'ReceivePaymentRet CreditCardTxnInfo' => 							array( null, null ), 
 			'ReceivePaymentRet CreditCardTxnInfo CreditCardTxnInputInfo' => 	array( null, null ), 
 			'ReceivePaymentRet CreditCardTxnInfo CreditCardTxnInputInfo *' => 	array( 'ReceivePayment', 'CreditCardTxnInfo_CreditCardTxnInputInfo_*' ), 
 			'ReceivePaymentRet CreditCardTxnInfo CreditCardTxnResultInfo' => 	array( null, null ), 
 			'ReceivePaymentRet CreditCardTxnInfo CreditCardTxnResultInfo *' => 	array( 'ReceivePayment', 'CreditCardTxnInfo_CreditCardTxnResultInfo_*' ), 
+*/
 			'ReceivePaymentRet AppliedToTxnRet' => 								array( null, null ), 
 			'ReceivePaymentRet AppliedToTxnRet TxnID' => 						array( 'ReceivePayment_AppliedToTxn', 'ToTxnID' ), 
 			'ReceivePaymentRet AppliedToTxnRet DiscountAccountRef' => 			array( null, null ),
@@ -2617,4 +2619,4 @@
 	}
 }
 
-?>
\ No newline at end of file
+?>
Index: GREG-README.txt
===================================================================
--- GREG-README.txt	(revision 13297)
+++ GREG-README.txt	(working copy)
@@ -1,2 +1,8 @@
 https://idnforums.intuit.com/messageview.aspx?catid=56&threadid=13858&forumid=1
 Version 1.5.3 on 2010-08-02
+
+Documentation at (as of 2014-04-09)
+http://wiki.consolibyte.com/wiki/doku.php/quickbooks_integration_php_consolibyte_sqlmirror
+
+Download from (as of 2014-04-09):
+http://consolibyte.com/downloads/quickbooks-php-devkit/
